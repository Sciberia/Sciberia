1
00:00:00,000 --> 00:00:00,070


2
00:00:00,070 --> 00:00:02,430
Материалы этой
лекции предоставлены

3
00:00:02,430 --> 00:00:03,810
под лицензией
Creative Commons.

4
00:00:03,810 --> 00:00:06,060
Ваша поддержка помогает
платформе МИТ OpenCourseWare

5
00:00:06,060 --> 00:00:10,150
предоставлять высококачественные
образовательные материалы бесплатно.

6
00:00:10,150 --> 00:00:12,700
Поддержать нас материально и
ознакомиться с остальными

7
00:00:12,700 --> 00:00:16,600
курсами МИТ, вы можете, посетив
веб-сайт МИТ OpenCourseWare,

8
00:00:16,600 --> 00:00:17,266
расположенный по адресу ocw.mit.edu

9
00:00:17,266 --> 00:00:26,290


10
00:00:26,290 --> 00:00:28,000
[ПРОФЕССОР] Рад вас видеть.

11
00:00:28,000 --> 00:00:29,830
Прошлая лекция была
целиком посвящена

12
00:00:29,830 --> 00:00:32,600
атакам переполнением буфера

13
00:00:32,600 --> 00:00:34,080
и сегодня мы продолжим

14
00:00:34,080 --> 00:00:37,430
Рассмотрим некоторые методы
реализации подобных атак.

15
00:00:37,430 --> 00:00:41,210
Итак, основная идея всех атак
переполнением буфера

16
00:00:41,210 --> 00:00:42,460
следующая.

17
00:00:42,460 --> 00:00:46,360
В первую очередь они
основаны на следующий фактах.

18
00:00:46,360 --> 00:00:54,080


19
00:00:54,080 --> 00:00:58,170
Во-первых системное
программное обеспечение

20
00:00:58,170 --> 00:01:00,191
часто пишется на Си.

21
00:01:00,191 --> 00:01:07,990


22
00:01:07,990 --> 00:01:10,248
Под системным программным
обеспечением я подразумеваю

23
00:01:10,248 --> 00:01:12,346
базы данных, компиляторы, сетевые сервера,

24
00:01:12,346 --> 00:01:15,212
и тому подобные вещи.

25
00:01:15,212 --> 00:01:17,670
Также вспомним такую вещь,
как ваша любимая

26
00:01:17,670 --> 00:01:18,680
командная оболочка.

27
00:01:18,680 --> 00:01:21,302
Все эти вещи обычно написаны на Си. Итак,

28
00:01:21,302 --> 00:01:23,135
почему же все эти вещи написаны на Си?

29
00:01:23,135 --> 00:01:25,610
Ну, они написаны на Си, потому что сообщество,

30
00:01:25,610 --> 00:01:28,085
конечно же, одержимо скоростью.

31
00:01:28,085 --> 00:01:31,070
И язык C - это как высокоуровневый
ассемблер,

32
00:01:31,070 --> 00:01:34,010
который делает на ближе
к аппаратному обеспечению,

33
00:01:34,010 --> 00:01:36,410
и поэтому все критически
важные задачи

34
00:01:36,410 --> 00:01:38,690
написаны на этом низкоуровневом языке.

35
00:01:38,690 --> 00:01:42,260
Итак, проблема с теми штуками написанными на Си

36
00:01:42,260 --> 00:01:48,705
в том, что C работает напрямую
с незащищенными адресами памяти.

37
00:01:48,705 --> 00:01:57,360


38
00:01:57,360 --> 00:01:57,860
Так?

39
00:01:57,860 --> 00:02:00,880
И не только раскрывает данные об адресах в памяти,

40
00:02:00,880 --> 00:02:04,750
но и не производит проверку границ, когда программы

41
00:02:04,750 --> 00:02:06,500
производят прямую адресацию.

42
00:02:06,500 --> 00:02:07,000
Верно?

43
00:02:07,000 --> 00:02:09,820
И как вы могли уже себе представить, это является рецептом для катастрофы.

44
00:02:09,820 --> 00:02:10,490
ОК?

45
00:02:10,490 --> 00:02:13,260
Итак, еще раз, почему Си не проверяет эти границы?

46
00:02:13,260 --> 00:02:15,830
Ну, первой причиной является то, что железо этого не делает.

47
00:02:15,830 --> 00:02:17,670
А люди, который пишут на Си, обычно,

48
00:02:17,670 --> 00:02:20,870
желают получить максимальную производительность.

49
00:02:20,870 --> 00:02:23,510
Другой причиной, является то, что в Си, как мы увидим позже,

50
00:02:23,510 --> 00:02:25,520
бывает крайне сложно опеределить

51
00:02:25,520 --> 00:02:28,050
семантику того, что же означает иметь указатель, который

52
00:02:28,050 --> 00:02:29,270
на самом деле в пределах границ.

53
00:02:29,270 --> 00:02:31,720
Значит, в некоторых случаях, для Си будет очень сложно

54
00:02:31,720 --> 00:02:33,490
автоматически выполнять эту проверку, во время выполнения.

55
00:02:33,490 --> 00:02:35,366
Сейчас мы рассмотрим несколько техник,

56
00:02:35,366 --> 00:02:36,990
которые, по сути, являются попыткой реализовывать данный тип

57
00:02:36,990 --> 00:02:37,950
автоматической выверки.

58
00:02:37,950 --> 00:02:39,700
Но как мы увидим, ни одна из этих техник

59
00:02:39,700 --> 00:02:42,310
не является 100% надежной.

60
00:02:42,310 --> 00:02:48,130
Так же эти атаки основываются на понимании

61
00:02:48,130 --> 00:02:51,025
архитектуры x86.

62
00:02:51,025 --> 00:02:56,884


63
00:02:56,884 --> 00:02:58,425
А под пониманием этой архитектуры

64
00:02:58,425 --> 00:03:01,350
я подразумеваю такие вещи, как в каком направлении растет стек,

65
00:03:01,350 --> 00:03:02,260
так?

66
00:03:02,260 --> 00:03:04,632
Какими являются соглашения о вызове для функций?

67
00:03:04,632 --> 00:03:06,590
Когда вы вызываете функцию в Си,

68
00:03:06,590 --> 00:03:07,407
как будет выглядеть стек?

69
00:03:07,407 --> 00:03:09,240
А когда вы размещаете
объект в куче,

70
00:03:09,240 --> 00:03:12,380
как будет происходить размещение
основных структур?

71
00:03:12,380 --> 00:03:15,040
Давайте рассмотрим простой пример.

72
00:03:15,040 --> 00:03:18,850
Он похож на тот, что мы видели

73
00:03:18,850 --> 00:03:21,250
на прошлой лекции.

74
00:03:21,250 --> 00:03:25,240
Итак, у нас тут стандартный запрос на чтение.

75
00:03:25,240 --> 00:03:28,610


76
00:03:28,610 --> 00:03:30,845
Далее мы имеем буфер.

77
00:03:30,845 --> 00:03:31,760
Вот он.

78
00:03:31,760 --> 00:03:34,980


79
00:03:34,980 --> 00:03:37,382
К этому моменту вы скорее 
всего достаточно развили

80
00:03:37,382 --> 00:03:39,590
свои инстинкты – всякий раз 
когда вы видите буфер

81
00:03:39,590 --> 00:03:41,506
вас переполняет страх 
– это верное отношение.

82
00:03:41,506 --> 00:03:43,380
Итак, здесь у нас буфер

83
00:03:43,380 --> 00:03:48,000
далее описываем классическую int i

84
00:03:48,000 --> 00:03:51,540
и вызываем пакостную команду gets

85
00:03:51,540 --> 00:03:56,780


86
00:03:56,780 --> 00:03:58,530
далее что-то ещё

87
00:03:58,530 --> 00:03:59,029
Так

88
00:03:59,029 --> 00:04:01,996
Мы обсуждали на прошлой лекции,

89
00:04:01,996 --> 00:04:03,120
что это опасно

90
00:04:03,120 --> 00:04:05,210
так как команда gets

91
00:04:05,210 --> 00:04:06,990
не проверяет границы буфера.

92
00:04:06,990 --> 00:04:11,680
Что может произойти, если
пользователь использует буфер

93
00:04:11,680 --> 00:04:17,000
и передаст в него значения.

94
00:04:17,000 --> 00:04:19,660
Если данные пришли от пользователя

95
00:04:19,660 --> 00:04:21,579
и мы использовали здесь небезопасную функцию

96
00:04:21,579 --> 00:04:23,910
в действительности можем получить
переполнение этого буфера,

97
00:04:23,910 --> 00:04:26,800
можем перезаписать данные в стеке.

98
00:04:26,800 --> 00:04:29,160
Напомню, как эти данные выглядят.

99
00:04:29,160 --> 00:04:36,960
Посмотрите на изображение стека.

100
00:04:36,960 --> 00:04:55,680
Допустим, здесь у нас i,
а здесь у нас buf.

101
00:04:55,680 --> 00:04:56,180
Так...

102
00:04:56,180 --> 00:04:58,250
Здесь у нас нулевой адрес буфера,

103
00:04:58,250 --> 00:04:59,862
а здесь последний.

104
00:04:59,862 --> 00:05:01,320
Прошу прощения за мои рисунки,

105
00:05:01,320 --> 00:05:02,610
обычно я пишу на маркерной доске.

106
00:05:02,610 --> 00:05:03,568
Помолитесь за меня.

107
00:05:03,568 --> 00:05:11,235
Как бы то ни было,
здесь мы имеем сохраненное значение

108
00:05:11,235 --> 00:05:14,870
базового указателя (break pointer).

109
00:05:14,870 --> 00:05:18,120


110
00:05:18,120 --> 00:05:26,770
Здесь у нас адрес возврата для функции.

111
00:05:26,770 --> 00:05:32,089
И дальше какие-то данные от 
предыдущего окна выполнения.

112
00:05:32,089 --> 00:05:36,220


113
00:05:36,220 --> 00:05:41,180
Не забывайте, что у нас есть
указатель стека,

114
00:05:41,180 --> 00:05:42,020
который указывает сюда,

115
00:05:42,020 --> 00:05:45,150


116
00:05:45,150 --> 00:05:52,540
новый базовый указатель,
указывающий сюда

117
00:05:52,540 --> 00:06:02,960


118
00:06:02,960 --> 00:06:04,780
указатель стека  вызывающей
программы указывает сюда

119
00:06:04,780 --> 00:06:06,290
и где-то выше

120
00:06:06,290 --> 00:06:09,216
базовый указатель вызывающей 
программы.

121
00:06:09,216 --> 00:06:14,430


122
00:06:14,430 --> 00:06:14,930
Так...

123
00:06:14,930 --> 00:06:17,790
Напомню, как работает переполнение стека

124
00:06:17,790 --> 00:06:22,031
обычно идет в этом направлении

125
00:06:22,031 --> 00:06:22,530
Так...

126
00:06:22,530 --> 00:06:24,670
Когда вызывается команда gets

127
00:06:24,670 --> 00:06:27,370
мы начинаем записывать байты
в буфер и в итоге

128
00:06:27,370 --> 00:06:31,604
начинаем перезаписывать эти
данные в стеке.

129
00:06:31,604 --> 00:06:33,145
По большей части со
всем этим

130
00:06:33,145 --> 00:06:34,710
вы должны быть хорошо знакомы.

131
00:06:34,710 --> 00:06:36,190
Так....

132
00:06:36,190 --> 00:06:38,830
Что делает взломщик,
чтобы это использовать?

133
00:06:38,830 --> 00:06:40,720
Просто вводит
длинную последовательность

134
00:06:40,720 --> 00:06:45,452
Здесь ключевая идея в том, что это
может быть использовано взломщиком.

135
00:06:45,452 --> 00:06:48,690
Итак, если адрес возврата уязвим,

136
00:06:48,690 --> 00:06:50,590
взломщик может определить

137
00:06:50,590 --> 00:06:52,200
где переход от функции

138
00:06:52,200 --> 00:06:53,780
к дальнейшему выполнению программы.

139
00:06:53,780 --> 00:06:57,410
Итак, что делает взломщик
узнав, что

140
00:06:57,410 --> 00:06:59,506
может получить доступ к
адресу возврата

141
00:06:59,506 --> 00:07:00,630
и передать управление в нужную
ему точку.

142
00:07:00,630 --> 00:07:02,635
Теперь взломщик

143
00:07:02,635 --> 00:07:05,495
запускает код с правами процесса,

144
00:07:05,495 --> 00:07:07,360
который только что был взломан, например.

145
00:07:07,360 --> 00:07:10,438
Если этот процесс был процессом
с высоким приоритетом,

146
00:07:10,438 --> 00:07:12,662
скажем, он был запущен пользователем
root или аdmin,

147
00:07:12,662 --> 00:07:15,120
или как ещё называется супер-пользователь
в вашей операционной системе,

148
00:07:15,120 --> 00:07:18,420
то эта программа, контролируемая
взломщиком

149
00:07:18,420 --> 00:07:22,370
может делать что ей угодно

150
00:07:22,370 --> 00:07:24,110
используя авторизацию высокоприоритетной
программы.

151
00:07:24,110 --> 00:07:26,420
Можно делать разные вещи,
например читать файлы,

152
00:07:26,420 --> 00:07:29,490
рассылать спам, если вы
взломали почтовый сервер.

153
00:07:29,490 --> 00:07:33,245
Можно даже отключить
брандмауэры

154
00:07:33,245 --> 00:07:35,250
так как смысл брандмауэров

155
00:07:35,250 --> 00:07:36,610
в том, что они выступают
барьером

156
00:07:36,610 --> 00:07:38,693
между хорошими устройствами
за брандмауэром

157
00:07:38,693 --> 00:07:40,880
и плохими устройствами
снаружи брандмауэра.

158
00:07:40,880 --> 00:07:43,460
Обычно между устройствами
за брандмауэром

159
00:07:43,460 --> 00:07:45,424
установлена высокая степень
доверия между собой.

160
00:07:45,424 --> 00:07:46,965
Но если вы взломали устройство,

161
00:07:46,965 --> 00:07:50,080
которое находится за брандмауэром -
это прекрасно.

162
00:07:50,080 --> 00:07:52,880
Теперь вы можете пройти мимо
многочисленных проверок

163
00:07:52,880 --> 00:07:55,590
которые эти устройства не выполняют

164
00:07:55,590 --> 00:07:57,420
так вы считаетесь доверенным.

165
00:07:57,420 --> 00:07:59,239
Есть одна вещь, над которой
стоит подумать.

166
00:07:59,239 --> 00:08:01,530
Я размышлял над этим, когда
был студентом

167
00:08:01,530 --> 00:08:02,960
я показал вам

168
00:08:02,960 --> 00:08:05,100
как вызвать переполнение
буфера, но

169
00:08:05,100 --> 00:08:06,990
почему ОС (операционная система)
не остановит это?

170
00:08:06,990 --> 00:08:07,490
Так....

171
00:08:07,490 --> 00:08:09,365
Разве ОС не должна быть тем,

172
00:08:09,365 --> 00:08:11,489
кто присматривает за всем,
как стражи Галактики

173
00:08:11,489 --> 00:08:13,950
и отражает все подобные
атаки злых сил?

174
00:08:13,950 --> 00:08:18,310
Необходимо отметить, что
ОС не присматривает за вами

175
00:08:18,310 --> 00:08:19,411
всё время.

176
00:08:19,411 --> 00:08:19,910
Так...

177
00:08:19,910 --> 00:08:21,817
Аппаратное обеспечение наблюдает
всё время.

178
00:08:21,817 --> 00:08:24,025
Оно получает инструкции,

179
00:08:24,025 --> 00:08:26,180
декодирует их и исполняет.

180
00:08:26,180 --> 00:08:29,430
Но на первый взгляд,
что тогда делает ОС?

181
00:08:29,430 --> 00:08:31,790
Она просто заполняет
страницы памяти,

182
00:08:31,790 --> 00:08:33,789
что позволяет запустить
приложение

183
00:08:33,789 --> 00:08:36,679
и если вы отправите запрос ОС,

184
00:08:36,679 --> 00:08:38,840
например для отправки пакета
по сети,

185
00:08:38,840 --> 00:08:41,634
или на межпроцессорное взаимодействие,
или на что-то ещё,

186
00:08:41,634 --> 00:08:43,360
то вы инициируете системный вызов

187
00:08:43,360 --> 00:08:45,280
который будет перехвачен ОС.

188
00:08:45,280 --> 00:08:47,020
Но, тем не менее,

189
00:08:47,020 --> 00:08:49,780
ОС не отслеживает каждую
инструкцию,

190
00:08:49,780 --> 00:08:52,510
которую исполняет ваша программа.

191
00:08:52,510 --> 00:08:56,070
Другими словами, когда
буфер переполняется,

192
00:08:56,070 --> 00:08:57,490
ОС не проверяет

193
00:08:57,490 --> 00:09:00,000
каждый адрес записи данных

194
00:09:00,000 --> 00:09:00,730
на соответствие.

195
00:09:00,730 --> 00:09:01,230
Так...

196
00:09:01,230 --> 00:09:02,604
Всё это адресное пространство

197
00:09:02,604 --> 00:09:04,570
принадлежит вам, вашему
процессу

198
00:09:04,570 --> 00:09:06,430
и вы можете делать с ним
всё, что угодно.

199
00:09:06,430 --> 00:09:08,971
Это жизненная философия
языка C

200
00:09:08,971 --> 00:09:10,080
Жить быстро, умереть молодым.

201
00:09:10,080 --> 00:09:10,600
Итак...

202
00:09:10,600 --> 00:09:14,090
Поэтому ОС вам здесь
не поможет.

203
00:09:14,090 --> 00:09:17,590
Далее в лекции мы обсудим
некоторые вещи,

204
00:09:17,590 --> 00:09:21,000
которые ОС может делать с помощью
аппаратного обеспечения

205
00:09:21,000 --> 00:09:23,560
и это поможет вам защититься от
такого типа атак.

206
00:09:23,560 --> 00:09:25,690
Ещё раз: только аппаратное
обеспечение

207
00:09:25,690 --> 00:09:27,980
вмешивается в каждую мелочь,
которую вы делаете.

208
00:09:27,980 --> 00:09:29,130
Поэтому вы можете

209
00:09:29,130 --> 00:09:30,650
использовать что-то из этого,
например

210
00:09:30,650 --> 00:09:31,730
применяя специальные виды
аппаратной защиты.

211
00:09:31,730 --> 00:09:34,229
Мы это обсудим немного позже.

212
00:09:34,229 --> 00:09:35,070


213
00:09:35,070 --> 00:09:37,710
Это был обзор того,

214
00:09:37,710 --> 00:09:39,500
как выглядит переполнение буфера.

215
00:09:39,500 --> 00:09:41,820
Как мы можем это исправить?

216
00:09:41,820 --> 00:09:49,010
Один из способов избежать
переполнения буфера

217
00:09:49,010 --> 00:09:54,180
это просто избегать ошибок
в вашем C коде.

218
00:09:54,180 --> 00:09:59,620


219
00:09:59,620 --> 00:10:02,360
Правильность конструкций даёт нам
большое преимущество.

220
00:10:02,360 --> 00:10:02,580
.

221
00:10:02,580 --> 00:10:04,371
Если у вас нет ошибок в программе,

222
00:10:04,371 --> 00:10:06,950
очевидно, взломщик не сможет их
использовать.

223
00:10:06,950 --> 00:10:08,490
Будучи профессором, я

224
00:10:08,490 --> 00:10:10,240
задумался над этим глубже.

225
00:10:10,240 --> 00:10:13,180
Конечно, проще сказать,
чем сделать.

226
00:10:13,180 --> 00:10:13,680
так...

227
00:10:13,680 --> 00:10:15,220
Есть пара простых вещей,
которые программисты могут делать,

228
00:10:15,220 --> 00:10:17,980
чтобы попрактиковаться в
гигиене безопасности.

229
00:10:17,980 --> 00:10:21,300
Возьмем к примеру функции
вроде этой gets

230
00:10:21,300 --> 00:10:22,800
В ней есть несколько
переходов типа go-to

231
00:10:22,800 --> 00:10:24,381
которые сейчас избегают
использовать.

232
00:10:24,381 --> 00:10:24,880
так....

233
00:10:24,880 --> 00:10:27,350
Когда вы компилируете код
и используете функции

234
00:10:27,350 --> 00:10:30,290
вроде этой, если вы пользуетесь
современным компилятором

235
00:10:30,290 --> 00:10:33,050
GCC, Visual Studio он предупредит
вас об этом.

236
00:10:33,050 --> 00:10:35,510
Скажет "Эй, это одна из
небезопасных функций!"

237
00:10:35,510 --> 00:10:37,526
Скажем, при использовании [НЕРАЗБОРЧИВО]

238
00:10:37,526 --> 00:10:39,590
или использовании версии [НЕРАЗБОРЧИВО]

239
00:10:39,590 --> 00:10:41,270
ограничения могут отслеживаться.

240
00:10:41,270 --> 00:10:43,800
Это одна простая вещь,
которую программисты могут делать.

241
00:10:43,800 --> 00:10:45,640
Но заметим, что много приложений

242
00:10:45,640 --> 00:10:48,319
использует буфер, вызывая
без необходимости

243
00:10:48,319 --> 00:10:49,610
эти функции.

244
00:10:49,610 --> 00:10:50,110
Так...

245
00:10:50,110 --> 00:10:52,540
Такие вещи встречаются повсеместно
в сетевых серверах.

246
00:10:52,540 --> 00:10:54,360
Определяют свои процедуры разбора,

247
00:10:54,360 --> 00:10:55,565
убеждаются, что всё извлечено

248
00:10:55,565 --> 00:10:57,110
из буферов так, как и задумывалось.

249
00:10:57,110 --> 00:10:59,480
Но просто ограждая себя от
таких вещей

250
00:10:59,480 --> 00:11:03,350
полностью проблему не решить.

251
00:11:03,350 --> 00:11:07,340
Ещё один момент, затрудняющий
подход к проблеме:

252
00:11:07,340 --> 00:11:12,114
не всегда очевидно,
что за ошибка в программе на C.

253
00:11:12,114 --> 00:11:14,655
Если вам доводилось работать над
большим проектом,

254
00:11:14,655 --> 00:11:17,030
написанным на C, то вы знаете,
как можно запутаться,

255
00:11:17,030 --> 00:11:20,060
если есть некоторое определение
функции

256
00:11:20,060 --> 00:11:22,080
которой передаётся 18 указателей void*

257
00:11:22,080 --> 00:11:24,620
Думаю, только Зевс знает,
что это всё может означать.

258
00:11:24,620 --> 00:11:27,490
И что ещё более сложно в
C-подобных языках,

259
00:11:27,490 --> 00:11:30,097
со слабой типизацией и
моментами вроде этого

260
00:11:30,097 --> 00:11:31,680
так это понять программисту

261
00:11:31,680 --> 00:11:33,006
что значит "есть ошибка",

262
00:11:33,006 --> 00:11:34,320
а что значит "нет ошибки".

263
00:11:34,320 --> 00:11:34,819
ОК

264
00:11:34,819 --> 00:11:36,990
В целом один из основных
моментов,

265
00:11:36,990 --> 00:11:39,920
который вы усвоите в этой аудитории,
что C вероятно

266
00:11:39,920 --> 00:11:42,498
порождение дьявола, верно?

267
00:11:42,498 --> 00:11:44,710
Но мы продолжаем его
использовать

268
00:11:44,710 --> 00:11:46,630
так как хотим, чтобы всё
работало быстро.

269
00:11:46,630 --> 00:11:48,430
Но так как железо становится
быстрее,

270
00:11:48,430 --> 00:11:51,780
появляются лучшие языки программирования
для написания систем большого масштаба

271
00:11:51,780 --> 00:11:54,090
мы видим, что может быть не 
всегда имеет смысл

272
00:11:54,090 --> 00:11:56,670
писать на C.

273
00:11:56,670 --> 00:11:58,300
Даже если вы думаете, что
программа должна быть быстрой.

274
00:11:58,300 --> 00:12:01,400
Мы обсудим это позже и в
следующих лекциях.

275
00:12:01,400 --> 00:12:03,549
Как мы видим, избегание
ошибок при программировании

276
00:12:03,549 --> 00:12:04,340
на первом месте по важности.

277
00:12:04,340 --> 00:12:15,170
Следующий подход - написание
утилит,

278
00:12:15,170 --> 00:12:18,090
позволяющих программистам
искать ошибки.

279
00:12:18,090 --> 00:12:26,670


280
00:12:26,670 --> 00:12:29,530
Пример этого - штука,

281
00:12:29,530 --> 00:12:30,926
называемая "статический анализ"

282
00:12:30,926 --> 00:12:33,175
Мы поговорим немного больше
о статическом анализе

283
00:12:33,175 --> 00:12:34,805
в дальнейших лекциях, достаточно

284
00:12:34,805 --> 00:12:38,400
сказать, что статический анализ -
это анализ исходного кода

285
00:12:38,400 --> 00:12:40,640
программы ещё до того, как
она запустится,

286
00:12:40,640 --> 00:12:42,530
и поиск потенциальных проблем.

287
00:12:42,530 --> 00:12:46,550
Представьте, что у вас есть
такая функция.

288
00:12:46,550 --> 00:12:50,342
Функция foo,

289
00:12:50,342 --> 00:12:52,640
которая получает указатель.

290
00:12:52,640 --> 00:12:56,420


291
00:12:56,420 --> 00:12:59,570
Скажем, здесь объявляем значение смещения.

292
00:12:59,570 --> 00:13:02,810


293
00:13:02,810 --> 00:13:10,110
Объявляем другой указатель и прибавляем смещение

294
00:13:10,110 --> 00:13:11,540
к тому указателю.

295
00:13:11,540 --> 00:13:13,620
Даже на текущий момент в коде

296
00:13:13,620 --> 00:13:15,650
статический анализ может
вам подсказать,

297
00:13:15,650 --> 00:13:18,110
что переменная смещения
не инициализирована.

298
00:13:18,110 --> 00:13:18,610
Так...

299
00:13:18,610 --> 00:13:20,700
По существу, вы можете проговорить,

300
00:13:20,700 --> 00:13:22,375
есть ли путь,
есть ли команда

301
00:13:22,375 --> 00:13:26,150
где-то в программе, при которой
смещение может быть

302
00:13:26,150 --> 00:13:28,410
инициализировано перед тем,
как будет использовано

303
00:13:28,410 --> 00:13:29,660
в этих вычислениях.

304
00:13:29,660 --> 00:13:32,540
В этом примере очень просто
увидеть, что нет.

305
00:13:32,540 --> 00:13:32,770
Так...

306
00:13:32,770 --> 00:13:34,960
Можете представить, что если
здесь будет больше скобок и

307
00:13:34,960 --> 00:13:36,630
вот таких вещей, определить
будет сложнее.

308
00:13:36,630 --> 00:13:39,130
Но одно, что может сказать утилита 
статического анализа

309
00:13:39,130 --> 00:13:41,090
или скажет компилятор,

310
00:13:41,090 --> 00:13:43,610
если вы будете это компилировать
"Эй, дружище,

311
00:13:43,610 --> 00:13:45,190
это не проинициализировано.

312
00:13:45,190 --> 00:13:46,940
Уверен, что это то, что ты
хочешь сделать?"

313
00:13:46,940 --> 00:13:49,330
Это был очень простой пример
статического анализа.

314
00:13:49,330 --> 00:13:53,330
Другой пример. Скажем, после этого

315
00:13:53,330 --> 00:13:54,960
у нас есть условие ветвления.

316
00:13:54,960 --> 00:14:02,260


317
00:14:02,260 --> 00:14:02,760
Так...

318
00:14:02,760 --> 00:14:06,240
Если смещение больше 8, то

319
00:14:06,240 --> 00:14:12,470
мы вызываем некоторую функцию
bar и передаём ей смещение.

320
00:14:12,470 --> 00:14:14,090
Можете заметить, что

321
00:14:14,090 --> 00:14:17,620
условие ветвления говорит нам

322
00:14:17,620 --> 00:14:20,160
нечто о значении смещения.

323
00:14:20,160 --> 00:14:20,730
Так...

324
00:14:20,730 --> 00:14:22,646
Игнорируя тот факт, что оно
не инициализировано,

325
00:14:22,646 --> 00:14:24,496
мы знаем, что как только
окажемся здесь

326
00:14:24,496 --> 00:14:26,870
смещение будет больше 8.

327
00:14:26,870 --> 00:14:28,430
В некоторых случаях мы можем

328
00:14:28,430 --> 00:14:31,840
учесть это ограничение,

329
00:14:31,840 --> 00:14:33,830
что смещение должно быть
больше 8

330
00:14:33,830 --> 00:14:35,340
в нашем анализе bar.

331
00:14:35,340 --> 00:14:35,840
Так...

332
00:14:35,840 --> 00:14:37,760
Когда мы начнем статический
анализ bar

333
00:14:37,760 --> 00:14:40,260
мы знаем, что смещение может
принимать только определенные значения

334
00:14:40,260 --> 00:14:42,510
Это очень высокоуровневое
представление

335
00:14:42,510 --> 00:14:44,051
для статического анализа
и мы обсудим

336
00:14:44,051 --> 00:14:45,190
это в дальнейших лекциях.

337
00:14:45,190 --> 00:14:46,860
Но это общее представление
о том, как

338
00:14:46,860 --> 00:14:49,420
мы можем найти некоторые
ошибки

339
00:14:49,420 --> 00:14:51,180
даже не исполняя код.

340
00:14:51,180 --> 00:14:52,430
Это понятно?

341
00:14:52,430 --> 00:14:55,184


342
00:14:55,184 --> 00:14:57,560
Ещё стоит подумать

343
00:14:57,560 --> 00:15:02,250
о "нечетком тестировании" (фаззинге).

344
00:15:02,250 --> 00:15:04,380
Идея нечеткого тестирования
в том,

345
00:15:04,380 --> 00:15:07,660
что вы берете все функции из кода

346
00:15:07,660 --> 00:15:10,630
и подаёте на вход этим функциям

347
00:15:10,630 --> 00:15:12,175
случайные значения.

348
00:15:12,175 --> 00:15:15,010
Смысл в том, чтобы получить
высокое покрытие

349
00:15:15,010 --> 00:15:17,450
кода тестами.

350
00:15:17,450 --> 00:15:19,480
В реальном мире

351
00:15:19,480 --> 00:15:21,160
обычно, когда вы проверяете модуль

352
00:15:21,160 --> 00:15:24,486
вы не можете проверить только
значения 2, 4, 8

353
00:15:24,486 --> 00:15:26,170
и 15 потому, что 15 нечетное.

354
00:15:26,170 --> 00:15:28,150
Необходимо тестировать все возможные
варианты  ветвлений.

355
00:15:28,150 --> 00:15:29,251
Что вы должны сделать -

356
00:15:29,251 --> 00:15:31,720
посмотреть на это как я говорил.
Сколько ветвлений

357
00:15:31,720 --> 00:15:35,238
из всей программы было
затронуто вашим

358
00:15:35,238 --> 00:15:36,125
тестовым кодом?

359
00:15:36,125 --> 00:15:38,000
Обычно ошибки прячутся
в следующих местах.

360
00:15:38,000 --> 00:15:39,870
Программист не рассматривает
крайние варианты

361
00:15:39,870 --> 00:15:42,430
и в результате некоторые тесты
модуля проходят успешно.

362
00:15:42,430 --> 00:15:44,310
Даже большинство тестов
проходит успешно.

363
00:15:44,310 --> 00:15:46,268
Но они не затрагивают

364
00:15:46,268 --> 00:15:47,170
крайние значения программы.

365
00:15:47,170 --> 00:15:50,200
Статический анализ может
помочь при нечетком тестировании.

366
00:15:50,200 --> 00:15:52,960
Ещё раз рассмотрим это ограничение.

367
00:15:52,960 --> 00:15:55,120
Например здесь, в этой программе

368
00:15:55,120 --> 00:15:58,260
мы имеем условие ветвления,
указывающее, что смещение

369
00:15:58,260 --> 00:15:59,400
будет больше 8.

370
00:15:59,400 --> 00:16:01,402
Мы можем узнать, чем
является смещение, статически.

371
00:16:01,402 --> 00:16:03,860
Можно убедиться, что если
автоматически генерировать

372
00:16:03,860 --> 00:16:08,194
случайные входные данные,
в одном из вариантов

373
00:16:08,194 --> 00:16:10,110
будем надеяться, обеспечит
смещение

374
00:16:10,110 --> 00:16:12,693
меньше 8, другой даст
смещение равное 8,

375
00:16:12,693 --> 00:16:15,290
и ещё в каком-то смещение
будет больше 8.

376
00:16:15,290 --> 00:16:18,500
Это понятно?

377
00:16:18,500 --> 00:16:19,000
Отлично.

378
00:16:19,000 --> 00:16:22,280
Основной смысл утилит
компоновки

379
00:16:22,280 --> 00:16:24,100
в помощи программистам в
поиске ошибок.

380
00:16:24,100 --> 00:16:29,030
Прелесть в том, что даже
частичный анализ может

381
00:16:29,030 --> 00:16:31,073
быть очень полезным,
в частности, когда

382
00:16:31,073 --> 00:16:32,975
вы имеете дело с C.
Многие утилиты,

383
00:16:32,975 --> 00:16:35,350
о которых мы ещё поговорим,
защитят от ошибок вроде

384
00:16:35,350 --> 00:16:37,210
переполнения буфера
или неинициализации переменных.

385
00:16:37,210 --> 00:16:38,910
Но они не могут выявить
все проблемы.

386
00:16:38,910 --> 00:16:39,410
Так...

387
00:16:39,410 --> 00:16:42,040
Но они ускоряют прогресс
в направлении

388
00:16:42,040 --> 00:16:44,065
безопасности программного
обеспечения.

389
00:16:44,065 --> 00:16:46,120
Сейчас, конечно, недостаток
этих утилит

390
00:16:46,120 --> 00:16:48,510
в их незавершенности.

391
00:16:48,510 --> 00:16:50,280
Движение вперёд - это не
достижение конечной точки.

392
00:16:50,280 --> 00:16:52,443
И поэтому остаётся очень
активная область исследований

393
00:16:52,443 --> 00:16:56,147
методов защиты от
уязвимостей в C

394
00:16:56,147 --> 00:16:57,480
и в программах в целом.

395
00:16:57,480 --> 00:17:00,440


396
00:17:00,440 --> 00:17:03,649
Это два основных подхода
к защите

397
00:17:03,649 --> 00:17:05,210
от переполнения буфера.

398
00:17:05,210 --> 00:17:07,810
Есть и другие подходы.

399
00:17:07,810 --> 00:17:13,410
Третий подход, на который
можете обратить внимание

400
00:17:13,410 --> 00:17:14,606
использование языка с безопасным
доступом к памяти.

401
00:17:14,606 --> 00:17:21,672


402
00:17:21,672 --> 00:17:36,524
Примеры таких языков -
Python, Java, C#

403
00:17:36,524 --> 00:17:38,940
Не включаю в это список
Perl потому,

404
00:17:38,940 --> 00:17:39,815
что люди использующие Perl - 
плохие люди.

405
00:17:39,815 --> 00:17:43,700
Вы можете использовать один из таких
языков с безопасным доступом к памяти.

406
00:17:43,700 --> 00:17:46,755
И это в некоторой степени
наиболее очевидное решение,

407
00:17:46,755 --> 00:17:48,300
которым вы можете воспользоваться.

408
00:17:48,300 --> 00:17:51,060
Ранее я говорил вам,
что C - это по сути

409
00:17:51,060 --> 00:17:54,090
высокоуровневый ассемблерный код
и он оставляет незащищенными простые указатели

410
00:17:54,090 --> 00:17:56,690
и делает то, что вы не хотите

411
00:17:56,690 --> 00:17:57,590
и не делает то, чего вы хотите

412
00:17:57,590 --> 00:17:58,729
как [НЕРАЗБОРЧИВО]

413
00:17:58,729 --> 00:18:01,020
Почему тогда не использовать
один из этих языков высокого уровня?

414
00:18:01,020 --> 00:18:03,340
Есть несколько причин

415
00:18:03,340 --> 00:18:09,890
Во первых осталось много

416
00:18:09,890 --> 00:18:11,360
ранее написанного кода.

417
00:18:11,360 --> 00:18:14,581


418
00:18:14,581 --> 00:18:15,080
Так...

419
00:18:15,080 --> 00:18:17,310
Всё прекрасно и замечательно,
если вы хотите начать

420
00:18:17,310 --> 00:18:18,905
новый проект и хотите
писать его

421
00:18:18,905 --> 00:18:20,488
на одном из этих действительно
безопасных языков.

422
00:18:20,488 --> 00:18:22,781
Но что, если вам достался
большой бинарный файл, или

423
00:18:22,781 --> 00:18:24,572
большой исходный код,
который

424
00:18:24,572 --> 00:18:27,415
был написан на C и разрабатывался
в течение 10, 15 лет,

425
00:18:27,415 --> 00:18:28,915
длительный проект

426
00:18:28,915 --> 00:18:31,240
над которым будут работать
ещё наши внуки.

427
00:18:31,240 --> 00:18:33,100
Вы не можете просто сказать:
я собираюсь писать все на C#

428
00:18:33,100 --> 00:18:34,431
и изменить мир.

429
00:18:34,431 --> 00:18:34,930
Так...

430
00:18:34,930 --> 00:18:37,160
И эта проблема не только в C.

431
00:18:37,160 --> 00:18:38,662
Есть системы, которые вы
используете

432
00:18:38,662 --> 00:18:41,110
и которых должны опасаться,
которые

433
00:18:41,110 --> 00:18:43,570
используют код на
Fortran и COBOL.

434
00:18:43,570 --> 00:18:44,170
Что?

435
00:18:44,170 --> 00:18:46,260
Эти штуки ещё со времён
гражданской войны.

436
00:18:46,260 --> 00:18:48,169
Почему так происходит?

437
00:18:48,169 --> 00:18:49,710
Причина этого в том,

438
00:18:49,710 --> 00:18:52,024
что, как инженеры, мы
хотим

439
00:18:52,024 --> 00:18:54,565
всё построить самостоятельно.
Это здорово

440
00:18:54,565 --> 00:18:55,714
это так, как мне хотелось бы

441
00:18:55,714 --> 00:18:57,740
я именую свои переменные так,
как мне хочется.

442
00:18:57,740 --> 00:18:59,020
Но в реальном мире так
не происходит.

443
00:18:59,020 --> 00:18:59,520
Так...

444
00:18:59,520 --> 00:19:02,195
Вы представляете свою работу,
она уже что-то делает,

445
00:19:02,195 --> 00:19:04,712
вы смотрите на код
и говорите

446
00:19:04,712 --> 00:19:05,670
Почему бы не делать
ещё и это?

447
00:19:05,670 --> 00:19:07,280
И дальше вы говорите

448
00:19:07,280 --> 00:19:08,942
Мы поработаем над этим в
следующей версии

449
00:19:08,942 --> 00:19:10,490
Но сейчас что-то уже
должно работать,

450
00:19:10,490 --> 00:19:13,266
иначе заказчики заберут
назад свои деньги.

451
00:19:13,266 --> 00:19:15,782
И здесь у нас большая проблема
наследуемого кода

452
00:19:15,782 --> 00:19:17,140
и что мы с ним должны делать?

453
00:19:17,140 --> 00:19:20,382
Есть система грубой оценки
границ (baggy bounds)

454
00:19:20,382 --> 00:19:22,340
одно из достоинств которой

455
00:19:22,340 --> 00:19:25,484
хорошая совместимость с
наследуемым кодом.

456
00:19:25,484 --> 00:19:27,525
Одна из причин, по которой

457
00:19:27,525 --> 00:19:29,775
вы вынуждены создавать
проблему с переполнением буфера

458
00:19:29,775 --> 00:19:33,360
уйдет при использовании языков
с безопасным доступом к памяти.

459
00:19:33,360 --> 00:19:39,420
Другая проблема возникает,
когда вам необходим

460
00:19:39,420 --> 00:19:42,794
низкоуровневый доступ
к оборудованию.

461
00:19:42,794 --> 00:19:48,832


462
00:19:48,832 --> 00:19:51,290
Это может произойти, если
вы пишете что-то вроде

463
00:19:51,290 --> 00:19:53,060
драйвера устройства.

464
00:19:53,060 --> 00:19:56,420
В этом случае вам
действительно необходимы

465
00:19:56,420 --> 00:19:58,146
преимущества, которые даёт C

466
00:19:58,146 --> 00:19:59,520
в части возможности получить
доступ

467
00:19:59,520 --> 00:20:01,240
к регистрам и понять

468
00:20:01,240 --> 00:20:04,350
что там происходит.

469
00:20:04,350 --> 00:20:07,840
Ещё одна причина,
которую люди часто превозносят

470
00:20:07,840 --> 00:20:12,390
и о которой я упоминал ранее -
это производительность.

471
00:20:12,390 --> 00:20:12,890
Так...

472
00:20:12,890 --> 00:20:14,560
Если вы заботитесь о производительности,

473
00:20:14,560 --> 00:20:16,060
обычно вы говорите,

474
00:20:16,060 --> 00:20:17,644
что будете писать на C, иначе

475
00:20:17,644 --> 00:20:19,268
всё будет медленно работать, но

476
00:20:19,268 --> 00:20:21,480
будете осмеяны гуру программирования
или ещё кем-то.

477
00:20:21,480 --> 00:20:24,930
Сейчас постоянно уменьшается
количество проблем

478
00:20:24,930 --> 00:20:26,110
с производительностью

479
00:20:26,110 --> 00:20:28,320
так как люди совершенствуются

480
00:20:28,320 --> 00:20:30,390
в вещах вроде
создания лучших компиляторов

481
00:20:30,390 --> 00:20:32,530
в которых есть куча мощных
возможностей по оптимизации.

482
00:20:32,530 --> 00:20:34,180
Есть штуки, наподобие

483
00:20:34,180 --> 00:20:36,440
JIT - снижающие затраты на

484
00:20:36,440 --> 00:20:38,960
использование языков с безопасным
доступом к памяти.

485
00:20:38,960 --> 00:20:41,110
Доводилось ли вам слышать
о JIT?

486
00:20:41,110 --> 00:20:43,526
Дам вам краткое представление
о том, что это.

487
00:20:43,526 --> 00:20:46,740
Идея в чем. Возьмём язык
вроде Java

488
00:20:46,740 --> 00:20:47,760
или JavaScript.

489
00:20:47,760 --> 00:20:50,360
Это языки высокого уровня
с динамической типизацией,

490
00:20:50,360 --> 00:20:54,740
автоматическим управлением
памятью и прочим.

491
00:20:54,740 --> 00:20:58,270
Когда эти языки только
появились,

492
00:20:58,270 --> 00:20:59,780
они были исключительно
интерпретируемые.

493
00:20:59,780 --> 00:21:00,280
Так...

494
00:21:00,280 --> 00:21:02,196
Под интерпретируемыми я
имею ввиду, что они не

495
00:21:02,196 --> 00:21:04,310
использовали напрямую
инструкции x86.

496
00:21:04,310 --> 00:21:06,410
Вместо этого эти языки
компилировались в некоторую

497
00:21:06,410 --> 00:21:07,890
промежуточную форму.

498
00:21:07,890 --> 00:21:11,370
Вы слышали про вещи вроде
JVM, байткод

499
00:21:11,370 --> 00:21:13,370
виртуальной машины Java
и прочее.

500
00:21:13,370 --> 00:21:13,870
Так...

501
00:21:13,870 --> 00:21:16,230
Мы имеем программу,
которая висит в памяти,

502
00:21:16,230 --> 00:21:18,450
берёт этот байткод и

503
00:21:18,450 --> 00:21:21,132
исполняет инструкции
высокого уровня

504
00:21:21,132 --> 00:21:22,750
которые закодированы в
байткоде.

505
00:21:22,750 --> 00:21:24,971
Например, некоторые
инструкции байткода JVM

506
00:21:24,971 --> 00:21:26,720
делают вещи вроде
помещения в стек и

507
00:21:26,720 --> 00:21:28,070
извлечения из стека.

508
00:21:28,070 --> 00:21:31,150
Итак, у нас есть программа,
которая обрабатывает эти

509
00:21:31,150 --> 00:21:34,350
инструкции, оперирует стеком
и исполняет эти операции.

510
00:21:34,350 --> 00:21:34,850
OK

511
00:21:34,850 --> 00:21:36,786
Всё это выглядит прекрасно
и замечательно,

512
00:21:36,786 --> 00:21:38,910
но все фанаты скорости
спрашивают -

513
00:21:38,910 --> 00:21:39,950
а что насчет производительности?

514
00:21:39,950 --> 00:21:40,870
Это слишком медленно.

515
00:21:40,870 --> 00:21:42,490
У нас есть интерпретатор,

516
00:21:42,490 --> 00:21:44,190
сидящий в памяти и

517
00:21:44,190 --> 00:21:46,090
съедающий ресурсы
аппаратуры.

518
00:21:46,090 --> 00:21:50,120
Люди начали делать следующее:
брали эти высокоуровневые

519
00:21:50,120 --> 00:21:52,210
интерпретируемые языки
и динамически

520
00:21:52,210 --> 00:21:55,140
генерировали x86 код
на лету.

521
00:21:55,140 --> 00:21:55,800
Так...

522
00:21:55,800 --> 00:21:59,230
Применительно к JIT компиляции
это значит,

523
00:21:59,230 --> 00:22:00,910
что я беру фрагмент кода
на JavaScript

524
00:22:00,910 --> 00:22:03,570
или фрагмент кода Java,
без разницы

525
00:22:03,570 --> 00:22:06,270
и отдаю авансом немного
времени

526
00:22:06,270 --> 00:22:08,650
на создание прямых машинных
инструкций.

527
00:22:08,650 --> 00:22:12,020
Инструкций x86, которые будут
выполняться напрямую на железе.

528
00:22:12,020 --> 00:22:14,890
Итак, вначале у меня
снижение производительности

529
00:22:14,890 --> 00:22:17,570
на JIT компиляцию, но потом

530
00:22:17,570 --> 00:22:19,450
программа запускается напрямую
с жесткого диска.

531
00:22:19,450 --> 00:22:19,970
Так...

532
00:22:19,970 --> 00:22:22,260
Поэтому проблема производительности

533
00:22:22,260 --> 00:22:23,842
не является такой непреодолимой,

534
00:22:23,842 --> 00:22:25,800
какой она выглядит.

535
00:22:25,800 --> 00:22:29,620
Есть ещё сумасшедшие вещи
вроде asm.js

536
00:22:29,620 --> 00:22:31,320
Мы можем поговорить об
этом после лекции,

537
00:22:31,320 --> 00:22:33,050
если вы пишете на JavaScript.

538
00:22:33,050 --> 00:22:34,674
Есть несколько хитростей
по оптимизации кода,

539
00:22:34,674 --> 00:22:36,470
которыми вы можете воспользоваться,
приведя код на

540
00:22:36,470 --> 00:22:39,750
JavaScript к некоторому очень
ограниченному подмножеству

541
00:22:39,750 --> 00:22:42,093
языка, работающему только
с массивами.

542
00:22:42,093 --> 00:22:44,426
Это позволит избежать
дополнительной нагрузки

543
00:22:44,426 --> 00:22:46,950
из-за динамической типизации
в JavaScript

544
00:22:46,950 --> 00:22:50,030
и вы получите код, проигрывающий
по производительности C и C++

545
00:22:50,030 --> 00:22:54,220
в 2 раза.

546
00:22:54,220 --> 00:22:56,860
Двукратная потеря кажется слишком
большой, но в иных случаях мы

547
00:22:56,860 --> 00:22:58,729
можем получить потери порядка
10x или даже 20x.

548
00:22:58,729 --> 00:23:01,145
В этом направлении сейчас произошел
значительный прогресс.

549
00:23:01,145 --> 00:23:04,003


550
00:23:04,003 --> 00:23:06,336
Также следует помнить, что

551
00:23:06,336 --> 00:23:08,820
зачастую производительность
не так и важна,

552
00:23:08,820 --> 00:23:10,001
как вы могли бы подумать.

553
00:23:10,001 --> 00:23:10,500
Так...

554
00:23:10,500 --> 00:23:12,340
Давайте поразмышляем об
этом следующим образом.

555
00:23:12,340 --> 00:23:15,200
Скажем ваша программа
упирается в ограничения ввода/вывода.

556
00:23:15,200 --> 00:23:16,330
Это не ограничения процессора.

557
00:23:16,330 --> 00:23:18,300
Другими словами, ваша
программа

558
00:23:18,300 --> 00:23:20,720
проводит большую часть времени
в ожидании сетевой активности,

559
00:23:20,720 --> 00:23:23,120
чтения с диска,
действий пользователя

560
00:23:23,120 --> 00:23:24,550
и прочего.

561
00:23:24,550 --> 00:23:26,650
В таких случаях у вас
нет необходимости

562
00:23:26,650 --> 00:23:29,490
в невероятно высокой
скорости вычислений.

563
00:23:29,490 --> 00:23:29,990
Так...

564
00:23:29,990 --> 00:23:31,448
Потому, как ваша программа

565
00:23:31,448 --> 00:23:34,174
не проводит большую
часть времени в вычислениях.

566
00:23:34,174 --> 00:23:35,840
И к аргументу о
производительности

567
00:23:35,840 --> 00:23:37,195
стоит отнестись скептически.

568
00:23:37,195 --> 00:23:38,732
Но большинство студентов

569
00:23:38,732 --> 00:23:39,690
борются за производительность.

570
00:23:39,690 --> 00:23:41,702
Например, если я попрошу
кого-то

571
00:23:41,702 --> 00:23:43,810
выйти и написать для меня
очень простую программу

572
00:23:43,810 --> 00:23:44,860
для разбора текстового файла,

573
00:23:44,860 --> 00:23:47,360
он проведет большое количество
времени, чтобы получить файл в C

574
00:23:47,360 --> 00:23:49,987
или C++. Программа будет
работать очень быстро,

575
00:23:49,987 --> 00:23:50,570
использовать шаблоны
и всё такое...

576
00:23:50,570 --> 00:23:53,680
Но это пишется в 1 строчку
на Python.

577
00:23:53,680 --> 00:23:55,335
И по сути работает
сравнимо по скорости.

578
00:23:55,335 --> 00:23:57,384
И вы можете разработать это
намного проще.

579
00:23:57,384 --> 00:23:59,300
Так что повторюсь, к аргументу
о производительности

580
00:23:59,300 --> 00:24:01,760
стоит относиться скептически.

581
00:24:01,760 --> 00:24:06,290
Итак, мы обсуждали три
способа

582
00:24:06,290 --> 00:24:07,445
избежать переполнение буфера.

583
00:24:07,445 --> 00:24:09,070
На первом месте -
избегание ошибок.

584
00:24:09,070 --> 00:24:11,162
Этого добиться непросто.

585
00:24:11,162 --> 00:24:13,730
Второе место - использование
и разработка утилит

586
00:24:13,730 --> 00:24:15,218
помогающих найти ошибки.

587
00:24:15,218 --> 00:24:17,230
И третье - включение
подобных утилит

588
00:24:17,230 --> 00:24:19,205
в процесс выполнения программы.

589
00:24:19,205 --> 00:24:22,060
Вы можете с надеждой положиться
на инструменты языков программирования,

590
00:24:22,060 --> 00:24:24,741
позволяющие в процессе
выполнения программы

591
00:24:24,741 --> 00:24:25,240
защититься от прямого доступа
к адресам памяти.

592
00:24:25,240 --> 00:24:27,073
Также вы можете проводить
проверку соответствия (balance checking)

593
00:24:27,073 --> 00:24:29,370
и тому подобное.

594
00:24:29,370 --> 00:24:32,320
Как я уже говорил, есть
большое количество

595
00:24:32,320 --> 00:24:35,800
наследуемого кода на C/C++.

596
00:24:35,800 --> 00:24:38,437
Некоторые технологии, в частности
использование утилит

597
00:24:38,437 --> 00:24:40,145
и проверок при выполнении

598
00:24:40,145 --> 00:24:43,220
сложно добавить в 
наследуемый код.

599
00:24:43,220 --> 00:24:47,000
Как можно избежать негативных
последствий переполнения

600
00:24:47,000 --> 00:24:49,512
буфера, несмотря на эти
сложности?

601
00:24:49,512 --> 00:24:53,090
Очень просто - забросив
обучение компьютерным дисциплинам

602
00:24:53,090 --> 00:24:55,070
и став художником или кем-то
вроде того.

603
00:24:55,070 --> 00:24:59,260
Итак, что именно происходит
при переполнении буфера?

604
00:24:59,260 --> 00:25:04,812
При этом взломщик
использует две вещи.

605
00:25:04,812 --> 00:25:11,020


606
00:25:11,020 --> 00:25:15,840
Во-первых цель
взлома - получить

607
00:25:15,840 --> 00:25:23,060
контроль над указателем
команд.

608
00:25:23,060 --> 00:25:29,910


609
00:25:29,910 --> 00:25:30,410
Так...

610
00:25:30,410 --> 00:25:33,470
И далее взломщик
как-то

611
00:25:33,470 --> 00:25:36,710
определяет место в коде

612
00:25:36,710 --> 00:25:39,980
в которое программа
передаёт управление

613
00:25:39,980 --> 00:25:40,680
против своей воли.

614
00:25:40,680 --> 00:25:43,880
Это необходимо, но
недостаточно для атак,

615
00:25:43,880 --> 00:25:46,500
которые обычно происходят.

616
00:25:46,500 --> 00:25:48,990
Взломщику ещё нужно, чтобы
указатель команд

617
00:25:48,990 --> 00:25:57,729
стал указывать на вредоносный
код.

618
00:25:57,729 --> 00:26:08,440


619
00:26:08,440 --> 00:26:08,940
Так...

620
00:26:08,940 --> 00:26:12,530
Как добиться, чтобы перехваченный

621
00:26:12,530 --> 00:26:14,930
указатель команд (IP) указывал
на что-то, что

622
00:26:14,930 --> 00:26:18,230
полезно для взломщика?

623
00:26:18,230 --> 00:26:20,730
Что интересно, в
большинстве случаев

624
00:26:20,730 --> 00:26:24,070
взломщику довольно просто

625
00:26:24,070 --> 00:26:26,660
поместить в память некоторый
необходимый код.

626
00:26:26,660 --> 00:26:28,660
В прошлой лекции мы
рассматривали некоторые

627
00:26:28,660 --> 00:26:31,530
атаки через shell-код,
при которых вредоносный

628
00:26:31,530 --> 00:26:32,530
код встраивается в
строку.

629
00:26:32,530 --> 00:26:35,029
Затронем сегодня и поговорим
на следующей лекции

630
00:26:35,029 --> 00:26:36,570
о том, что можно
использовать и часть

631
00:26:36,570 --> 00:26:38,700
уже имеющегося в
программе кода,

632
00:26:38,700 --> 00:26:41,745
обратившись к нему
непредусмотренным образом,

633
00:26:41,745 --> 00:26:43,850
чтобы нанести некий вред.

634
00:26:43,850 --> 00:26:48,119
Как правило, определение
кода, которому взломщик

635
00:26:48,119 --> 00:26:49,910
хочет передать управление -
не такая сложная задача, как

636
00:26:49,910 --> 00:26:52,820
собственно передача
управления в

637
00:26:52,820 --> 00:26:56,692
данный участок памяти.

638
00:26:56,692 --> 00:26:58,150
Причина сложности в следующем.

639
00:26:58,150 --> 00:27:03,210
Взломщик некоторым образом

640
00:27:03,210 --> 00:27:04,800
знает, куда передать управление.

641
00:27:04,800 --> 00:27:05,300
Так...

642
00:27:05,300 --> 00:27:07,275
Как мы сейчас увидим,
я говорил на прошлой лекции,

643
00:27:07,275 --> 00:27:09,691
многие атаки через
shell-код

644
00:27:09,691 --> 00:27:13,650
использую жестко привязанные
участки памяти,

645
00:27:13,650 --> 00:27:16,004
в которые необходимо перенаправить
указатель команд.

646
00:27:16,004 --> 00:27:18,170
Некоторые типы защиты

647
00:27:18,170 --> 00:27:21,960
устанавливают случайные адреса
расположения блока кода,

648
00:27:21,960 --> 00:27:24,710
расположения кучи, затрудняя
взломщику поиск

649
00:27:24,710 --> 00:27:27,590
адреса их расположения.

650
00:27:27,590 --> 00:27:33,820
Рассмотрим один простой подход
к недопущению негативных последствий.

651
00:27:33,820 --> 00:27:37,280
Суть подхода в добавлении
в стек канарейки.

652
00:27:37,280 --> 00:27:42,920


653
00:27:42,920 --> 00:27:45,650
Метод канарейки в стеке
заключается в том,

654
00:27:45,650 --> 00:27:48,400
что во время переполнения буфера

655
00:27:48,400 --> 00:27:53,060
всё будет хорошо, если мы
позволим взломщику перезаписать

656
00:27:53,060 --> 00:27:56,080
адрес возврата, и сможем
определить это

657
00:27:56,080 --> 00:27:59,840
до того, как перейдем
по адресу,

658
00:27:59,840 --> 00:28:02,860
по которому нас хотел
перенаправить взломщик.

659
00:28:02,860 --> 00:28:05,230
В общих чертах это
работает так.

660
00:28:05,230 --> 00:28:11,810
Вернемся к диаграмме
стека.

661
00:28:11,810 --> 00:28:15,150
Мы можем рассматривать это
как некое магическое значение

662
00:28:15,150 --> 00:28:20,060
обычно расположенное перед
адресом возврата.

663
00:28:20,060 --> 00:28:22,060
Поэтому любая запись значений
при переполнении

664
00:28:22,060 --> 00:28:25,804
первым делом затронет канарейку
и лишь затем адрес возврата.

665
00:28:25,804 --> 00:28:27,915
Если мы можем проверить
канарейку перед тем,

666
00:28:27,915 --> 00:28:30,190
как сделаем возврат из функции,
то мы сможем определить взлом.

667
00:28:30,190 --> 00:28:35,600
Скажем, здесь у нас буфер.

668
00:28:35,600 --> 00:28:44,760


669
00:28:44,760 --> 00:28:46,875
Расположим канарейку здесь.

670
00:28:46,875 --> 00:28:53,960


671
00:28:53,960 --> 00:28:59,514
Здесь будет сохраненное значение EBP

672
00:28:59,514 --> 00:29:02,746


673
00:29:02,746 --> 00:29:04,454
а здесь адрес возврата.

674
00:29:04,454 --> 00:29:09,900


675
00:29:09,900 --> 00:29:12,470
Напомню, переполнение идёт
в этом направлении.

676
00:29:12,470 --> 00:29:16,650
Идея в том, что когда
переполнение

677
00:29:16,650 --> 00:29:18,870
захочет добраться до этого
адреса возврата,

678
00:29:18,870 --> 00:29:22,770
перед этим оно зацепит
канарейку здесь.

679
00:29:22,770 --> 00:29:24,085
Есть вопросы?

680
00:29:24,085 --> 00:29:27,000
[АУДИТОРИЯ] Почему
оно зацепит канарейку?

681
00:29:27,000 --> 00:29:29,018
[ПРОФЕССОР] Потому, что
полагаем,

682
00:29:29,018 --> 00:29:31,130
что взломщик не знает, как

683
00:29:31,130 --> 00:29:34,795
выборочно перепрыгивать при
записи участки памяти,

684
00:29:34,795 --> 00:29:36,940
поэтому атака переполнением
работает последовательно.

685
00:29:36,940 --> 00:29:42,190
Вы определяете, где
располагаются данные

686
00:29:42,190 --> 00:29:44,300
и передаёте строку

687
00:29:44,300 --> 00:29:46,810
диапазон которой растет
в этом направлении.

688
00:29:46,810 --> 00:29:49,050
Вы правы в том,
что если бы взломщик мог

689
00:29:49,050 --> 00:29:52,135
перепрыгнуть напрямую сюда,
то мы бы потерпели поражение.

690
00:29:52,135 --> 00:29:54,200
Но в простых случаях
при переполнении

691
00:29:54,200 --> 00:29:57,690
всё происходит именно
вышеописанным способом.

692
00:29:57,690 --> 00:30:00,260
Основной смысл использования
канарейки в том,

693
00:30:00,260 --> 00:30:03,970
что мы даём уязвимости сработать
и буферу переполниться.

694
00:30:03,970 --> 00:30:06,436
Но затем у нас есть код,

695
00:30:06,436 --> 00:30:08,850
который на момент возврата
из функции

696
00:30:08,850 --> 00:30:11,350
проверяет канарейку и
убеждается в её

697
00:30:11,350 --> 00:30:12,800
нормальном состоянии.

698
00:30:12,800 --> 00:30:13,300
Так...

699
00:30:13,300 --> 00:30:15,900
Метод называется методом канарейки
потому, что в давние времена,

700
00:30:15,900 --> 00:30:17,395
когда ещё не существовало организаций
по защите животных,

701
00:30:17,395 --> 00:30:18,880
люди использовали птиц для того,
чтобы заранее узнать об опасности.

702
00:30:18,880 --> 00:30:20,860
Поэтому так и назвали - метод
канарейки.

703
00:30:20,860 --> 00:30:24,077
[АУДИТОРИЯ] У меня вопрос.
Если взломщик может

704
00:30:24,077 --> 00:30:31,750
перезаписать адрес возврата
и изменить канарейку,

705
00:30:31,750 --> 00:30:34,225
как мы проверим, что канарейка
не была изменена,

706
00:30:34,225 --> 00:30:37,690
что можно продолжать
выполнение?

707
00:30:37,690 --> 00:30:41,670
Взломщик перезаписывает
адрес возврата, так?

708
00:30:41,670 --> 00:30:47,444
Как проверяется, что канарейка
не была модифицирована....

709
00:30:47,444 --> 00:30:48,110
[ПРОФЕССОР] Да.

710
00:30:48,110 --> 00:30:50,640
В общем у вас есть какой-то
фрагмент кода,

711
00:30:50,640 --> 00:30:54,505
который проводит проверку перед
тем, как произойдёт возврат.

712
00:30:54,505 --> 00:30:55,838
Другими словами, вы правы,

713
00:30:55,838 --> 00:30:58,200
порядок именно такой.

714
00:30:58,200 --> 00:31:00,530
По существу, что вы делаете -

715
00:31:00,530 --> 00:31:03,750
вы получаете в этом поддержку
от компилятора,

716
00:31:03,750 --> 00:31:07,090
который расширяет соглашение
о вызовах,

717
00:31:07,090 --> 00:31:08,150
если вы это укажете.

718
00:31:08,150 --> 00:31:10,610
Перед тем, как выполнится
этот переход,

719
00:31:10,610 --> 00:31:13,700
мы проверяем это значение
на корректность,

720
00:31:13,700 --> 00:31:16,140
убеждаясь, что оно
не было затронуто.

721
00:31:16,140 --> 00:31:18,557
Тогда и только тогда мы
можем переходить куда-то ещё.

722
00:31:18,557 --> 00:31:20,640
[АУДИТОРИЯ] Может быть я
опережаю события, но

723
00:31:20,640 --> 00:31:22,390
нельзя ли предположить,
что взломщик

724
00:31:22,390 --> 00:31:25,365
может найти или угадать
значение канарейки?

725
00:31:25,365 --> 00:31:27,990
[ПРОФЕССОР] Об этом я хотел
рассказать намного позже.

726
00:31:27,990 --> 00:31:29,281
Если бы у меня были призы,
я бы вам выдал один.

727
00:31:29,281 --> 00:31:30,162
Но у меня их нет.

728
00:31:30,162 --> 00:31:30,870
Но вы молодец.

729
00:31:30,870 --> 00:31:31,370
Вам звёздочку.

730
00:31:31,370 --> 00:31:32,970
Это исключительно верно.

731
00:31:32,970 --> 00:31:35,250
Следующее, о чем
хотелось бы сказать,

732
00:31:35,250 --> 00:31:37,280
какая проблема может
быть в этой схеме?

733
00:31:37,280 --> 00:31:39,910
Что если, например,
в каждой программе

734
00:31:39,910 --> 00:31:41,890
мы будем использовать
значение A?

735
00:31:41,890 --> 00:31:44,164
Во всех случаях
значение A.

736
00:31:44,164 --> 00:31:46,330
Это как один ключ
для всех дверей.

737
00:31:46,330 --> 00:31:47,790
Тогда мы столкнемся

738
00:31:47,790 --> 00:31:48,789
с вышеупомянутой проблемой.

739
00:31:48,789 --> 00:31:50,742
Поэтому взломщик,
возвращаясь к вашему вопросу,

740
00:31:50,742 --> 00:31:54,990
он знает, насколько велик
этот участок.

741
00:31:54,990 --> 00:31:57,035
Это определённо для
каждой системы.

742
00:31:57,035 --> 00:31:58,993
При переполнении буфера вы
можете просто поместить

743
00:31:58,993 --> 00:32:01,440
сюда кучу значений A
и они перепишутся и здесь.

744
00:32:01,440 --> 00:32:02,898
Так что вы полностью правы.

745
00:32:02,898 --> 00:32:05,033
Поэтому вы можете
помещать различные

746
00:32:05,033 --> 00:32:08,760
значения в канарейку,
чтобы предотвратить это.

747
00:32:08,760 --> 00:32:10,330
В данном случае
вы можете использовать

748
00:32:10,330 --> 00:32:18,760
весьма забавный
вид канарейки

749
00:32:18,760 --> 00:32:21,020
использующий способ,

750
00:32:21,020 --> 00:32:27,700
которым большинство
программ и функций на C

751
00:32:27,700 --> 00:32:29,310
обрабатывают специальные
символы.

752
00:32:29,310 --> 00:32:32,180
Представьте, что вы можете использовать
эти символы в канарейке.

753
00:32:32,180 --> 00:32:34,990
Бинарное значение 0, которое
является нулевым байтом,

754
00:32:34,990 --> 00:32:36,900
это нулевой символ в ASCII,

755
00:32:36,900 --> 00:32:41,000
CR, LF, -1.

756
00:32:41,000 --> 00:32:43,770
Забавно в этих управляющих
символах то, что большинство

757
00:32:43,770 --> 00:32:47,090
функций с уязвимостями,
например оперирующие строками,

758
00:32:47,090 --> 00:32:50,260
остановятся встретив один
из этих символов или

759
00:32:50,260 --> 00:32:51,610
одно из этих значений.

760
00:32:51,610 --> 00:32:54,780
Представьте, что вы используете
некоторую функцию,

761
00:32:54,780 --> 00:32:56,020
оперирующую строками, чтобы
пойти этим путём.

762
00:32:56,020 --> 00:32:57,603
Она встречает нулевой
символ

763
00:32:57,603 --> 00:32:59,310
упс... и останавливает
обработку.

764
00:32:59,310 --> 00:32:59,810
Так...

765
00:32:59,810 --> 00:33:02,962
Или если мы используем
строчно-ориентированные

766
00:33:02,962 --> 00:33:04,670
функции, CR и LF часто
используются

767
00:33:04,670 --> 00:33:05,836
как маркер конца строки.

768
00:33:05,836 --> 00:33:08,060
Ещё раз, вы используете
небезопасную функцию

769
00:33:08,060 --> 00:33:09,335
чтобы попытаться сделать это.

770
00:33:09,335 --> 00:33:10,300
Она натыкается на это

771
00:33:10,300 --> 00:33:11,870
и происходит выход.

772
00:33:11,870 --> 00:33:14,650
Ещё один специальный
символ -1.

773
00:33:14,650 --> 00:33:16,400
Вот один из способов,
как это можно решить.

774
00:33:16,400 --> 00:33:17,500
Одну секунду...

775
00:33:17,500 --> 00:33:19,050
Также вы можете

776
00:33:19,050 --> 00:33:22,628
использовать случайное значение.

777
00:33:22,628 --> 00:33:27,140


778
00:33:27,140 --> 00:33:29,662
Это лишь примеры,

779
00:33:29,662 --> 00:33:31,620
попытка показать,
как именно

780
00:33:31,620 --> 00:33:33,385
можно предотвратить
взлом.

781
00:33:33,385 --> 00:33:35,700
Вы берёте некое
случайное число

782
00:33:35,700 --> 00:33:37,795
и это усложняет
взломщику

783
00:33:37,795 --> 00:33:39,550
определение этого
значения.

784
00:33:39,550 --> 00:33:42,282
Теперь, конечно, сложность
определения

785
00:33:42,282 --> 00:33:43,990
случайного числа
для взломщика

786
00:33:43,990 --> 00:33:46,150
зависит от его размерности.

787
00:33:46,150 --> 00:33:48,970
Если взломщик, например,

788
00:33:48,970 --> 00:33:51,250
понимает, что энтропия

789
00:33:51,250 --> 00:33:54,320
вашей системы
только 3 бита, то он

790
00:33:54,320 --> 00:33:57,357
сможет использовать
атаку методом перебора.

791
00:33:57,357 --> 00:33:59,065
Так что нужно помнить,

792
00:33:59,065 --> 00:34:00,523
что бы вам ни говорили,

793
00:34:00,523 --> 00:34:03,699
что защита случайным
значением

794
00:34:03,699 --> 00:34:05,240
если диапазон значения
недостаточно велик,

795
00:34:05,240 --> 00:34:07,800
может не обеспечить
тот уровень безопасности,

796
00:34:07,800 --> 00:34:09,749
на который вы рассчитываете.

797
00:34:09,749 --> 00:34:12,603
У вас есть вопрос?

798
00:34:12,603 --> 00:34:14,186
[АУДИТОРИЯ] Что может
произойти, если

799
00:34:14,186 --> 00:34:16,651
вы читаете из другого
буфера и записываете

800
00:34:16,651 --> 00:34:18,130
в этот буфер в стеке?

801
00:34:18,130 --> 00:34:22,074
В этом случае случайная
генерация значения канарейки

802
00:34:22,074 --> 00:34:23,060
выглядит бесполезной.

803
00:34:23,060 --> 00:34:25,032
Ведь если я читаю из
другого буфера,

804
00:34:25,032 --> 00:34:26,511
я смогу узнать значение
канарейки.

805
00:34:26,511 --> 00:34:28,980
И у меня есть этот буфер,
в который и пишу,

806
00:34:28,980 --> 00:34:30,414
и который невозможно
будет проконтролировать.

807
00:34:30,414 --> 00:34:32,866
И в этот буфер я смогу
записать сколько угодно всего.

808
00:34:32,866 --> 00:34:34,366
Мне не нужна измененная
канарейка,

809
00:34:34,366 --> 00:34:36,342
и я смогу безопасно
её перезаписать.

810
00:34:36,342 --> 00:34:39,489
Не знаю, как это
работает на практике,

811
00:34:39,489 --> 00:34:42,159
и какой ход выполнения.
Полагаю, читаем из

812
00:34:42,159 --> 00:34:44,010
буфера в стеке и
должны остановиться.....

813
00:34:44,010 --> 00:34:45,384
[ПРОФЕССОР] Да, мы
полагаем,

814
00:34:45,384 --> 00:34:47,239
что записываем в буфер.

815
00:34:47,239 --> 00:34:51,226
Смысл в том, что помещаем
в него таким образом

816
00:34:51,226 --> 00:34:52,720
слишком длинную строку.

817
00:34:52,720 --> 00:34:56,750
И далее, если вы не
можете узнать это значение,

818
00:34:56,750 --> 00:35:02,303
вы не можете разместить
его в строке, которой

819
00:35:02,303 --> 00:35:03,209
производится переполнение.

820
00:35:03,209 --> 00:35:05,560
[АУДИТОРИЯ] Но вы сказали,
что это предопределено, так?

821
00:35:05,560 --> 00:35:06,490
0, CR, LF, -1

822
00:35:06,490 --> 00:35:07,950
[ПРОФЕССОР] Да

823
00:35:07,950 --> 00:35:08,560
так...

824
00:35:08,560 --> 00:35:09,060
ОК

825
00:35:09,060 --> 00:35:10,230
Думаю, теперь я понял
ваш вопрос.

826
00:35:10,230 --> 00:35:10,975
Да.

827
00:35:10,975 --> 00:35:16,660
Если вы используете
предопределенную канарейку

828
00:35:16,660 --> 00:35:19,754
и не используете

829
00:35:19,754 --> 00:35:21,910
одну из функций, скажем,

830
00:35:21,910 --> 00:35:25,422
из стандартных библиотек,
которая может быть одурачена этим,

831
00:35:25,422 --> 00:35:27,380
то да, вы сможете этим
защитить систему.

832
00:35:27,380 --> 00:35:30,576
[АУДИТОРИЯ] Но я могу
использовать копирование строки

833
00:35:30,576 --> 00:35:32,076
указав назначением наш буфер,

834
00:35:32,076 --> 00:35:35,631
а источником другой буфер

835
00:35:35,631 --> 00:35:37,422
и в этом случае защита не сработает.

836
00:35:37,422 --> 00:35:40,972


837
00:35:40,972 --> 00:35:43,948
[ПРОФЕССОР] Не уверен, что
понял суть вашего взлома.

838
00:35:43,948 --> 00:35:45,932
[АУДИТОРИЯ] Функция
копирования строки

839
00:35:45,932 --> 00:35:50,075
размещает пользовательский
ввод в блоке данных и перезаписывает

840
00:35:50,075 --> 00:35:51,710
канарейку, и вы говорите....
А, теперь я

841
00:35:51,710 --> 00:35:52,570
понял, о чем вы говорили.

842
00:35:52,570 --> 00:35:53,278
[ПРОФЕССОР] Так.

843
00:35:53,278 --> 00:35:56,665
Смысл в том, что вы
можете заполнить буфер

844
00:35:56,665 --> 00:35:58,140
откуда-то полученными
байтами.

845
00:35:58,140 --> 00:36:00,098
Но пока вы не можете
узнать вот это,

846
00:36:00,098 --> 00:36:02,590
это не имеет значения..

847
00:36:02,590 --> 00:36:03,700
Но вы правы.

848
00:36:03,700 --> 00:36:07,300
Всё, что может помочь вам
узнать это значение, или

849
00:36:07,300 --> 00:36:11,939
подобрать его случайно,
приведет к вторжению в систему.

850
00:36:11,939 --> 00:36:13,807
[АУДИТОРИЯ] Могу ли я, скажем,

851
00:36:13,807 --> 00:36:16,677
взять что-то вроде
количества секунд

852
00:36:16,677 --> 00:36:19,820
или миллисекунд с
начала века и использовать

853
00:36:19,820 --> 00:36:23,600
это в качестве контрольного
значения?

854
00:36:23,600 --> 00:36:24,974
[ПРОФЕССОР] Зачастую
оказывается,

855
00:36:24,974 --> 00:36:27,554
что полученное время

856
00:36:27,554 --> 00:36:30,000
не настолько случайно,
как можно было бы предположить.

857
00:36:30,000 --> 00:36:33,121
Программа сама может,
например,

858
00:36:33,121 --> 00:36:36,795
иметь переменную или
функцию для логирования,

859
00:36:36,795 --> 00:36:38,962
которую можно вызвать,
чтобы получить время,

860
00:36:38,962 --> 00:36:40,170
в которое программа была
запущена, и прочее вроде того.

861
00:36:40,170 --> 00:36:40,615
Но вы правы.

862
00:36:40,615 --> 00:36:42,406
На практике, если вы можете
использовать, скажем,

863
00:36:42,406 --> 00:36:46,020
аппаратные датчики системы,
которые доступны на низком уровне,

864
00:36:46,020 --> 00:36:49,250
лучше датчик тайминга,
то да - это

865
00:36:49,250 --> 00:36:49,750
может сработать.

866
00:36:49,750 --> 00:36:53,282
[АУДИТОРИЯ] Но даже если
вы можете прочитать лог,

867
00:36:53,282 --> 00:36:56,276
он зависит от времени, в которое
вы сформировали запрос.

868
00:36:56,276 --> 00:37:00,180
И если вы не можете получить
данные о времени выполнения

869
00:37:00,180 --> 00:37:03,596
запроса с вашего компьютера
на сервер,

870
00:37:03,596 --> 00:37:06,036
не думаю, что вы сможете
с уверенностью определить,

871
00:37:06,036 --> 00:37:07,476
какое именно время правильное.

872
00:37:07,476 --> 00:37:08,476
[ПРОФЕССОР] Это так.

873
00:37:08,476 --> 00:37:09,017
Вы правы.

874
00:37:09,017 --> 00:37:11,884
Во всех таких вещах
дьявол кроется в деталях.

875
00:37:11,884 --> 00:37:14,300
Другими словами, если
есть какая-то возможность

876
00:37:14,300 --> 00:37:16,424
определить тип тайминга,

877
00:37:16,424 --> 00:37:18,840
можно обнаружить, что энтропия
(диапазон разброса

878
00:37:18,840 --> 00:37:20,359
случайных значений) может
быть меньше

879
00:37:20,359 --> 00:37:22,400
полного размера временнОй
метки, иногда

880
00:37:22,400 --> 00:37:23,433
намного меньше.

881
00:37:23,433 --> 00:37:25,141
Возможно, взломщик
сможет определить

882
00:37:25,141 --> 00:37:26,880
час и минуту, в которую
вы сняли временнУю

883
00:37:26,880 --> 00:37:30,608
метку, но не секунду например.

884
00:37:30,608 --> 00:37:33,326
Ещё один вопрос, и
пойдём дальше.

885
00:37:33,326 --> 00:37:35,826
[АУДИТОРИЯ] Подскажите, писать
свой генератор случайных чисел -

886
00:37:35,826 --> 00:37:37,477
это плохая идея, так?

887
00:37:37,477 --> 00:37:38,560
[ПРОФЕССОР] Правильно.

888
00:37:38,560 --> 00:37:38,870
[АУДИТОРИЯ] Обычно мы
должны просто использовать

889
00:37:38,870 --> 00:37:40,547
то, что предоставляет
нам система?

890
00:37:40,547 --> 00:37:41,338
[ПРОФЕССОР] Да.

891
00:37:41,338 --> 00:37:42,832
Это очень правильно.

892
00:37:42,832 --> 00:37:44,990
Это всё-равно, что изобретать
свою систему шифрования,

893
00:37:44,990 --> 00:37:46,865
чем зачастую занимаются

894
00:37:46,865 --> 00:37:47,473
старшекурсники.

895
00:37:47,473 --> 00:37:49,306
Мы не агентство национальной
безопасности, не математики.

896
00:37:49,306 --> 00:37:50,302
Такие попытки
заканчиваются провалом.

897
00:37:50,302 --> 00:37:51,800
Так что вы исключительно
правы.

898
00:37:51,800 --> 00:37:54,630
Но даже если вы используете
генератор случайных чисел,

899
00:37:54,630 --> 00:37:57,310
предоставляемый системой,
энтропия может оказаться

900
00:37:57,310 --> 00:37:58,150
меньшей, чем вы
рассчитывали.

901
00:37:58,150 --> 00:38:00,441
Я покажу вам такой пример,
когда мы будем говорить

902
00:38:00,441 --> 00:38:01,640
о генерации случайных
чисел.

903
00:38:01,640 --> 00:38:07,150
В общих чертах мы разобрались,
как работает метод канарейки.

904
00:38:07,150 --> 00:38:12,040
Так как мы обучаемся безопасности,
вас может заинтересовать,

905
00:38:12,040 --> 00:38:17,692
в каких случаях метод
канарейки не работает.

906
00:38:17,692 --> 00:38:20,762
Итак, когда он даёт сбой?

907
00:38:20,762 --> 00:38:28,310


908
00:38:28,310 --> 00:38:35,540
Он может провалиться,
если взломщик использует

909
00:38:35,540 --> 00:38:38,187
вещи вроде указателей
на функции.

910
00:38:38,187 --> 00:38:45,430


911
00:38:45,430 --> 00:38:47,780
Если указатель функции
изменяется,

912
00:38:47,780 --> 00:38:49,807
канарейка никак
не предотвратит

913
00:38:49,807 --> 00:38:52,120
использование этой уязвимости.

914
00:38:52,120 --> 00:38:57,890
Например, у вас есть код,
в котором описывается указатель.

915
00:38:57,890 --> 00:39:00,890


916
00:39:00,890 --> 00:39:05,312
Он некоторым образом инициализируется,
неважно где и как.

917
00:39:05,312 --> 00:39:08,648
А здесь у вас буфер.

918
00:39:08,648 --> 00:39:11,930


919
00:39:11,930 --> 00:39:15,010
И опять функция gets поднимает
свою уродливую голову.

920
00:39:15,010 --> 00:39:17,710


921
00:39:17,710 --> 00:39:25,090
И тут, скажем, мы
присваиваем значение 5

922
00:39:25,090 --> 00:39:27,160
указателю.

923
00:39:27,160 --> 00:39:29,230
Заметим, что мы
не пытаемся

924
00:39:29,230 --> 00:39:32,780
атаковать адрес возврата
функции, которая

925
00:39:32,780 --> 00:39:34,845
содержит этот код.

926
00:39:34,845 --> 00:39:37,130
Когда произойдет
переполнение буфера,

927
00:39:37,130 --> 00:39:40,710
данный указатель
будет повреждён.

928
00:39:40,710 --> 00:39:43,955
Это закончится тем, что
взломщик сможет

929
00:39:43,955 --> 00:39:46,180
изменить указатель и

930
00:39:46,180 --> 00:39:50,930
записать 5 по какому-то
нужному взломщику адресу.

931
00:39:50,930 --> 00:39:53,170
Все видят, что канарейка
здесь не помогает?

932
00:39:53,170 --> 00:39:54,711
Мы не изменяем путь,

933
00:39:54,711 --> 00:39:57,650
которым функция
осуществляет возврат.

934
00:39:57,650 --> 00:40:01,026
[АУДИТОРИЯ] Разве указатель
не располагается ниже буфера?

935
00:40:01,026 --> 00:40:03,840


936
00:40:03,840 --> 00:40:06,035
[ПРОФЕССОР] Да, конечно.

937
00:40:06,035 --> 00:40:07,160
[АУДИТОРИЯ] Не обязательно....

938
00:40:07,160 --> 00:40:08,440
[ПРОФЕССОР] Вы беспокоитесь
о том, должно это быть здесь,

939
00:40:08,440 --> 00:40:09,730
или здесь?

940
00:40:09,730 --> 00:40:11,715
[АУДИТОРИЯ] Я
беспокоюсь о том,

941
00:40:11,715 --> 00:40:14,048
сможем ли мы получить
доступ к указателю,

942
00:40:14,048 --> 00:40:14,960
когда происходить
переполнение...

943
00:40:14,960 --> 00:40:15,877
[ПРОФЕССОР] О, да.

944
00:40:15,877 --> 00:40:17,960
Да, необязательно.
Это хороший вопрос.

945
00:40:17,960 --> 00:40:20,982
Я думаю, как и в
предыдущих примерах,

946
00:40:20,982 --> 00:40:23,610
предполагаем, что это должно

947
00:40:23,610 --> 00:40:24,690
быть здесь.

948
00:40:24,690 --> 00:40:27,102
Если направление стека
такое, то указатель

949
00:40:27,102 --> 00:40:28,490
будет ниже.

950
00:40:28,490 --> 00:40:30,282
Но порядок конкретных
переменных

951
00:40:30,282 --> 00:40:32,031
зависит от многих вещей.

952
00:40:32,031 --> 00:40:34,400
Он зависит от того, как
расположит это всё компилятор,

953
00:40:34,400 --> 00:40:36,730
он зависит от аппаратной
структуры памяти

954
00:40:36,730 --> 00:40:38,350
и прочего.

955
00:40:38,350 --> 00:40:41,820
Но вы правы -

956
00:40:41,820 --> 00:40:43,740
если переполнение буфера
пойдет в этом направлении,

957
00:40:43,740 --> 00:40:45,780
а указатель будет
до буфера,

958
00:40:45,780 --> 00:40:48,140
да, это не сработает.

959
00:40:48,140 --> 00:40:50,028
[АУДИТОРИЯ] Почему
бы не связать с

960
00:40:50,028 --> 00:40:51,798
функцией канарейку, как

961
00:40:51,798 --> 00:40:53,587
мы делали с адресом возврата?

962
00:40:53,587 --> 00:40:54,170
[ПРОФЕССОР] О.

963
00:40:54,170 --> 00:40:55,685
Это интересный момент.

964
00:40:55,685 --> 00:40:57,274
Вы можете это сделать.

965
00:40:57,274 --> 00:40:59,860
На самом деле, вы можете
создать компилятор,

966
00:40:59,860 --> 00:41:02,590
который как только встретит
какой-то указатель,

967
00:41:02,590 --> 00:41:05,451
будет пытаться защитить
его от всего, что только можно.

968
00:41:05,451 --> 00:41:05,950
Так...

969
00:41:05,950 --> 00:41:08,910
Но если такой компилятор
появится, формируемый

970
00:41:08,910 --> 00:41:12,766
код будет слишком
прожорливым по ресурсам

971
00:41:12,766 --> 00:41:15,250
для обеспечения всех
возможных проверок.

972
00:41:15,250 --> 00:41:18,630
Потому что, представьте,
каждый раз, когда вы

973
00:41:18,630 --> 00:41:21,048
захотите обратиться к
указателю, или вызвать функцию,

974
00:41:21,048 --> 00:41:22,506
у вас будет выполняться
код, который осуществляет

975
00:41:22,506 --> 00:41:24,690
проверку канарейки.

976
00:41:24,690 --> 00:41:27,064
Но вообще, да. Вы можете
сделать что-то вроде этого.

977
00:41:27,064 --> 00:41:29,380


978
00:41:29,380 --> 00:41:30,510
Только есть ли в этом смысл?

979
00:41:30,510 --> 00:41:33,012
Мы видим, что канарейка
не всегда спасает.

980
00:41:33,012 --> 00:41:36,490


981
00:41:36,490 --> 00:41:39,160
Мы уже говорили, что

982
00:41:39,160 --> 00:41:46,112
если вы можете угадать
случайное число, то

983
00:41:46,112 --> 00:41:48,080
даже случайно сгенерированные
канарейки не работают.

984
00:41:48,080 --> 00:41:57,440


985
00:41:57,440 --> 00:42:01,560
Создание безопасных генераторов
случайных чисел -

986
00:42:01,560 --> 00:42:03,234
большая самостоятельная проблема.

987
00:42:03,234 --> 00:42:05,025
Это очень, очень сложно
поэтому мы не будем

988
00:42:05,025 --> 00:42:06,710
углубляться в эту тему.

989
00:42:06,710 --> 00:42:08,380
Достаточно сказать, что
если вы можете угадать

990
00:42:08,380 --> 00:42:09,420
случайное число -
вся защита рушится.

991
00:42:09,420 --> 00:42:11,915
[АУДИТОРИЯ] Канарейка
обычно меньшей размерности,

992
00:42:11,915 --> 00:42:12,414
чем адрес возврата?

993
00:42:12,414 --> 00:42:13,914
Ведь иначе вы можете
просто запомнить адрес

994
00:42:13,914 --> 00:42:17,706
возврата и проверить, не
изменился ли он.

995
00:42:17,706 --> 00:42:18,580
[ПРОФЕССОР] Посмотрим.

996
00:42:18,580 --> 00:42:23,310
Вы говорите, что канарейка
здесь, скажем,

997
00:42:23,310 --> 00:42:25,568
меньше чем....

998
00:42:25,568 --> 00:42:28,459
[АУДИТОРИЯ] Я хочу сказать, что
канарейка, как известно,

999
00:42:28,459 --> 00:42:32,051
это значение, которое выбирается
произвольно.

1000
00:42:32,051 --> 00:42:34,051
Нельзя ли просто запомнить
значение адреса возврата

1001
00:42:34,051 --> 00:42:37,550
и проверить, не
изменялся ли он?

1002
00:42:37,550 --> 00:42:40,505
[ПРОФЕССОР] Вы спрашиваете,
не может ли система безопасности

1003
00:42:40,505 --> 00:42:42,373
посмотреть на адрес возврата

1004
00:42:42,373 --> 00:42:45,320
и определить, не
изменился ли он?

1005
00:42:45,320 --> 00:42:46,270
Да.

1006
00:42:46,270 --> 00:42:50,329
Другими словами,
и да и нет.

1007
00:42:50,329 --> 00:42:51,787
Напомню, это у нас

1008
00:42:51,787 --> 00:42:53,953
перезаписывается при
атаке переполнением буфера.

1009
00:42:53,953 --> 00:42:56,350
И это может вызвать
проблемы.

1010
00:42:56,350 --> 00:42:59,720
Но в принципе, если
каким-то образом

1011
00:42:59,720 --> 00:43:04,620
это будет неизменным,
вы можете сделать что-то такое.

1012
00:43:04,620 --> 00:43:07,640
Проблема в том,
что во многих случаях

1013
00:43:07,640 --> 00:43:09,750
учет всех вариантов

1014
00:43:09,750 --> 00:43:10,968
чрезмерно усложнит задачу.

1015
00:43:10,968 --> 00:43:13,060
Представьте, эта функция

1016
00:43:13,060 --> 00:43:16,147
может быть вызвана
из разных мест, и так далее.

1017
00:43:16,147 --> 00:43:17,605
Для экономии времени

1018
00:43:17,605 --> 00:43:19,253
мы пойдём дальше.

1019
00:43:19,253 --> 00:43:20,794
Если в конце
останется время,

1020
00:43:20,794 --> 00:43:22,335
мы вернемся к некоторым
из этих вопросов.

1021
00:43:22,335 --> 00:43:25,308


1022
00:43:25,308 --> 00:43:29,330
Это были ситуации, в которых канарейка
могла потерпеть неудачу.

1023
00:43:29,330 --> 00:43:32,800
Есть ещё случаи, в которых
она также не поможет.

1024
00:43:32,800 --> 00:43:35,220
Например, она может
не оправдать надежд

1025
00:43:35,220 --> 00:43:38,650
при атаке с использованием
malloc и free.

1026
00:43:38,650 --> 00:43:44,446
Это тип атаки, завязанный
на особенности языка C.

1027
00:43:44,446 --> 00:43:45,750
Посмотрим, как это
происходит.

1028
00:43:45,750 --> 00:43:49,860


1029
00:43:49,860 --> 00:43:59,012
Представьте, что у вас
есть 2 указателя - p и q.

1030
00:43:59,012 --> 00:44:08,110
Теперь представьте, что мы
вызвали malloc для каждого из них.

1031
00:44:08,110 --> 00:44:11,310
Мы получили 1024 байта
памяти для p

1032
00:44:11,310 --> 00:44:15,080
и 1024 байта памяти для q.

1033
00:44:15,080 --> 00:44:17,880


1034
00:44:17,880 --> 00:44:29,478
Далее выполним strcpy
в p из некоего участка

1035
00:44:29,478 --> 00:44:31,898
памяти, измененного
взломщиком.

1036
00:44:31,898 --> 00:44:35,300
И здесь происходит
переполнение.

1037
00:44:35,300 --> 00:44:43,770
И далее пусть будет
free(q)

1038
00:44:43,770 --> 00:44:48,010
и free(p).

1039
00:44:48,010 --> 00:44:48,510
ОК.

1040
00:44:48,510 --> 00:44:50,360
Это очень простой
код, так?

1041
00:44:50,360 --> 00:44:54,321
Два указателя, выделение
памяти для каждого из них,

1042
00:44:54,321 --> 00:44:55,945
вы используете одну из
встроенных функций,

1043
00:44:55,945 --> 00:45:03,380
происходит переполнение буфера
и мы освобождаем p и q.

1044
00:45:03,380 --> 00:45:12,540
Положим, p и q, то есть
участки памяти, выделенные им,

1045
00:45:12,540 --> 00:45:22,142
находятся по соседству
в смысле

1046
00:45:22,142 --> 00:45:23,190
расположения в памяти.

1047
00:45:23,190 --> 00:45:27,520
Оба этих объекта
располагаются в памяти

1048
00:45:27,520 --> 00:45:30,320
прямо друг за другом.

1049
00:45:30,320 --> 00:45:34,460
И здесь могут произойти
плохие и малозаметные вещи

1050
00:45:34,460 --> 00:45:39,860
потому, что это копирование
строки может переполнить

1051
00:45:39,860 --> 00:45:41,830
переменную p кучей всего

1052
00:45:41,830 --> 00:45:47,510
и также может повредить
значение, принадлежащее q.

1053
00:45:47,510 --> 00:45:48,010
OK

1054
00:45:48,010 --> 00:45:49,020
И это может вызвать проблемы.

1055
00:45:49,020 --> 00:45:50,519
И некоторые из вас
могут неумышленно

1056
00:45:50,519 --> 00:45:52,635
допустить эту же
ошибку в своём коде

1057
00:45:52,635 --> 00:45:55,110
запутавшись в использовании
указателей.

1058
00:45:55,110 --> 00:45:56,890
Всё будет выглядеть
исправно работающим,

1059
00:45:56,890 --> 00:45:58,778
но когда вы используете
free, это вызовет ошибку сегментации

1060
00:45:58,778 --> 00:45:59,880
или что-то типа того.

1061
00:45:59,880 --> 00:46:00,500
Так...

1062
00:46:00,500 --> 00:46:01,660
Я расскажу вам,

1063
00:46:01,660 --> 00:46:03,201
каким образом взломщик

1064
00:46:03,201 --> 00:46:04,550
может извлечь из этого пользу.

1065
00:46:04,550 --> 00:46:06,591
Разберемся, почему
так происходит.

1066
00:46:06,591 --> 00:46:12,520
Представьте, что в реализации
free и malloc

1067
00:46:12,520 --> 00:46:17,380
выделенные блоки выглядят
следующим образом.

1068
00:46:17,380 --> 00:46:21,040


1069
00:46:21,040 --> 00:46:29,320
Это данные, доступные
программе, которые

1070
00:46:29,320 --> 00:46:29,820
располагаются здесь.

1071
00:46:29,820 --> 00:46:35,250
А здесь переменная,
содержащая размер.

1072
00:46:35,250 --> 00:46:38,310
Это недоступно приложению
напрямую.

1073
00:46:38,310 --> 00:46:40,200
Это служебные данные,

1074
00:46:40,200 --> 00:46:43,110
которыми управляют
malloc и free,

1075
00:46:43,110 --> 00:46:45,390
чтобы у вас была возможность

1076
00:46:45,390 --> 00:46:47,990
узнать размер выделенного
буфера.

1077
00:46:47,990 --> 00:46:55,480
Здесь у нас свободный блок,
который выглядит следующим

1078
00:46:55,480 --> 00:46:56,350
образом и содержит некие
метаданные.

1079
00:46:56,350 --> 00:47:03,092


1080
00:47:03,092 --> 00:47:06,126
Здесь у вас размер
свободного блока.

1081
00:47:06,126 --> 00:47:09,070
А здесь участок
свободного пространства.

1082
00:47:09,070 --> 00:47:11,320
Дальше становится интереснее.

1083
00:47:11,320 --> 00:47:17,230
Здесь указатель на
предыдущий участок

1084
00:47:17,230 --> 00:47:19,770
и указатель на следующий
участок.

1085
00:47:19,770 --> 00:47:25,352


1086
00:47:25,352 --> 00:47:27,060
И здесь, возможно, какие-то
данные о размере.

1087
00:47:27,060 --> 00:47:28,976
Зачем нужны эти
два указателя?

1088
00:47:28,976 --> 00:47:30,415
Система управления памятью
в данном случае

1089
00:47:30,415 --> 00:47:33,800
использует двусвязный список
для того, чтобы определить,

1090
00:47:33,800 --> 00:47:37,950
как освобождать блоки,
связанные друг с другом.

1091
00:47:37,950 --> 00:47:39,605
Когда вы выделяете
свободный блок,

1092
00:47:39,605 --> 00:47:41,520
вы извлекаете его
из этого двусвязного списка.

1093
00:47:41,520 --> 00:47:45,070
А когда вы его освобождаете,
то после некоторых вычислений

1094
00:47:45,070 --> 00:47:46,480
указателей, вы возвращаете
его на место.

1095
00:47:46,480 --> 00:47:48,690
То есть добавляете его
назад в двусвязный список.

1096
00:47:48,690 --> 00:47:51,100
Всегда, когда слышите
об арифметике указателей,

1097
00:47:51,100 --> 00:47:52,667
вы должны стать
предельно внимательными.

1098
00:47:52,667 --> 00:47:55,000
Очень много проблем
появляются отсюда.

1099
00:47:55,000 --> 00:48:01,230
Итак, здесь у нас происходит
переполнение буфера,

1100
00:48:01,230 --> 00:48:03,007
здесь p

1101
00:48:03,007 --> 00:48:05,930
Если мы предположим, что
p и q располагаются друг за другом

1102
00:48:05,930 --> 00:48:08,795
или очень близко в памяти, то
что может произойти,

1103
00:48:08,795 --> 00:48:12,080
когда переполнение буфера
перезапишет

1104
00:48:12,080 --> 00:48:19,050
данные о размере для
выделенного блока под указатель q

1105
00:48:19,050 --> 00:48:20,470
Все успевают следить за
ходом моей мысли?

1106
00:48:20,470 --> 00:48:22,860
Если успеваете, то

1107
00:48:22,860 --> 00:48:24,720
можете включить воображение

1108
00:48:24,720 --> 00:48:26,230
и понять, где начинаются проблемы.

1109
00:48:26,230 --> 00:48:27,605
Суть происходящего

1110
00:48:27,605 --> 00:48:31,840
в этих операциях
освобождения памяти -

1111
00:48:31,840 --> 00:48:35,978
они используют эти метаданные
для операций вот

1112
00:48:35,978 --> 00:48:37,226
с этими указателями.

1113
00:48:37,226 --> 00:48:53,220


1114
00:48:53,220 --> 00:48:56,790
Где-то в реализации free

1115
00:48:56,790 --> 00:49:05,480
есть указатель на

1116
00:49:05,480 --> 00:49:11,100
значение size, а size

1117
00:49:11,100 --> 00:49:12,236
доступна взломщику,

1118
00:49:12,236 --> 00:49:14,110
так как он произвел
переполнение буфера.

1119
00:49:14,110 --> 00:49:14,609
Так...

1120
00:49:14,609 --> 00:49:18,610
Дальше происходит

1121
00:49:18,610 --> 00:49:20,090
арифметика указателей.

1122
00:49:20,090 --> 00:49:25,030


1123
00:49:25,030 --> 00:49:28,950
Это указатель на предыдущий,

1124
00:49:28,950 --> 00:49:33,110
а это указатель на следующий блок.

1125
00:49:33,110 --> 00:49:35,910
Дальше идет обновление указателя

1126
00:49:35,910 --> 00:49:37,880
на предыдущий блок

1127
00:49:37,880 --> 00:49:41,660


1128
00:49:41,660 --> 00:49:44,760
и обновление указателя
на следующий блок.

1129
00:49:44,760 --> 00:49:49,807


1130
00:49:49,807 --> 00:49:51,348
Не стоит об этом

1131
00:49:51,348 --> 00:49:52,867
слишком заботиться.

1132
00:49:52,867 --> 00:49:55,450
Это просто пример кода.

1133
00:49:55,450 --> 00:49:58,520
Это нужно для того,
чтобы показать, взломщик,

1134
00:49:58,520 --> 00:50:00,570
изменив данные о
размере блока size

1135
00:50:00,570 --> 00:50:03,860
может управлять указателем,
использующимся в коде free.

1136
00:50:03,860 --> 00:50:06,040
Это происходит из-за
вот этих двух выражений,

1137
00:50:06,040 --> 00:50:08,830
обновляющих указатели.

1138
00:50:08,830 --> 00:50:09,330
Так...

1139
00:50:09,330 --> 00:50:10,870
Эти указатели где-то здесь.

1140
00:50:10,870 --> 00:50:15,080
И так как взломщик 
может управлять p,

1141
00:50:15,080 --> 00:50:17,690
он может управлять также
и этими указателями.

1142
00:50:17,690 --> 00:50:20,680
Именно здесь и
происходит атака.

1143
00:50:20,680 --> 00:50:22,862
Когда код free выполняется

1144
00:50:22,862 --> 00:50:25,370
и пытается, например,
объединить два блока

1145
00:50:25,370 --> 00:50:27,289
как раз возникает необходимость
в использовании структуры

1146
00:50:27,289 --> 00:50:28,580
двусвязного списка.

1147
00:50:28,580 --> 00:50:30,791
Так как у вас два блока,
расположенных вплотную друг

1148
00:50:30,791 --> 00:50:33,650
к другу, и оба они свободны, вы захотите
их объединить в один большой блок.

1149
00:50:33,650 --> 00:50:36,180
При этом мы контролируем размер

1150
00:50:36,180 --> 00:50:38,154
а значит контролируем весь процесс.

1151
00:50:38,154 --> 00:50:41,235
Если мы поймем, как
работает переполнение

1152
00:50:41,235 --> 00:50:44,474
в этих местах мы сможем
записать в память

1153
00:50:44,474 --> 00:50:46,840
то, что нам нужно.

1154
00:50:46,840 --> 00:50:49,065
Это понятно?

1155
00:50:49,065 --> 00:50:50,550
Как я уже говорил,
такое может произойти

1156
00:50:50,550 --> 00:50:52,974
и в вашем коде, если
вы будете недостаточно

1157
00:50:52,974 --> 00:50:54,015
аккуратны с указателями.

1158
00:50:54,015 --> 00:50:56,985
Если вы допустите ошибку,
дважды пытаясь освободить память

1159
00:50:56,985 --> 00:50:59,507
или сделать что-то подобное -
это приведет к ошибке сегментации.

1160
00:50:59,507 --> 00:51:01,090
Происходит это потому,
что испорчены метаданные,

1161
00:51:01,090 --> 00:51:03,690
находящиеся в каждом
выделенном блоке.

1162
00:51:03,690 --> 00:51:05,950
И в некоторой точке
вычисления укажут

1163
00:51:05,950 --> 00:51:08,465
на некоторое мусорное
значение, и вам конец.

1164
00:51:08,465 --> 00:51:11,048
Но если вы взломщик,
вы можете специально

1165
00:51:11,048 --> 00:51:12,482
установить это значение
и использовать его.

1166
00:51:12,482 --> 00:51:17,280


1167
00:51:17,280 --> 00:51:17,790
ОК.

1168
00:51:17,790 --> 00:51:22,345
Теперь перейдём к
другому подходу к

1169
00:51:22,345 --> 00:51:27,070
избавлению от атак
переполнением буфера.

1170
00:51:27,070 --> 00:51:30,742
И этот подход -
проверка границ.

1171
00:51:30,742 --> 00:51:38,480


1172
00:51:38,480 --> 00:51:45,090
Цель проверки границ - 
убедиться, что при

1173
00:51:45,090 --> 00:51:48,768
использовании определенного
указателя на

1174
00:51:48,768 --> 00:51:54,380
некий объект в памяти,
он указывает на

1175
00:51:54,380 --> 00:51:58,380
нечто, находящееся в
пределах границ этого объекта.

1176
00:51:58,380 --> 00:52:00,760
Это основная идея,
лежащая в основе метода.

1177
00:52:00,760 --> 00:52:03,180
Это очень просто на
высоком уровне.

1178
00:52:03,180 --> 00:52:05,610
Но на C это очень

1179
00:52:05,610 --> 00:52:07,010
сложно для понимания.

1180
00:52:07,010 --> 00:52:08,926
Что понимать под: указатель
находится в границах или

1181
00:52:08,926 --> 00:52:11,260
за пределами границ,
корректен или некорректен?

1182
00:52:11,260 --> 00:52:13,920
Например, у вас есть
два фрагмента

1183
00:52:13,920 --> 00:52:16,620
кода, вроде этого.

1184
00:52:16,620 --> 00:52:24,580
Вы объявляете массив
символов размером 1024 байта.

1185
00:52:24,580 --> 00:52:29,570
Дальше, вы используете
что-то вроде этого.

1186
00:52:29,570 --> 00:52:32,920
Вы объявляете указатель
и берёте адрес

1187
00:52:32,920 --> 00:52:38,686
одного из элементов x.

1188
00:52:38,686 --> 00:52:41,620


1189
00:52:41,620 --> 00:52:43,070
Есть ли в этом смысл?

1190
00:52:43,070 --> 00:52:45,240
Стоит ли так делать?

1191
00:52:45,240 --> 00:52:46,900
Сложно сказать.

1192
00:52:46,900 --> 00:52:50,182
Если вы используете
этот массив x как строку,

1193
00:52:50,182 --> 00:52:52,556
может быть и есть смысл в получении
указателя вроде этого.

1194
00:52:52,556 --> 00:52:54,871
Далее вы можете увеличивать или
уменьшать этот указатель, возможно

1195
00:52:54,871 --> 00:52:57,287
чтобы найти определённый символ.

1196
00:52:57,287 --> 00:53:00,545
Но если это - сетевое сообщение
или что-то наподобие, то возможно

1197
00:53:00,545 --> 00:53:04,120
оно соответствует некоторой структуре.

1198
00:53:04,120 --> 00:53:05,670
В этом случае, возможно, нет
смысла проходить всю строку

1199
00:53:05,670 --> 00:53:07,661
символ за символом.

1200
00:53:07,661 --> 00:53:09,535
Проблема здесь в том,
что мы

1201
00:53:09,535 --> 00:53:12,110
можем делать всё,
что угодно.

1202
00:53:12,110 --> 00:53:15,510
Сложно определить, что
на самом деле должно было
быть сделано.

1203
00:53:15,510 --> 00:53:18,280
В результате, очень сложно

1204
00:53:18,280 --> 00:53:19,960
точно определить рамки

1205
00:53:19,960 --> 00:53:23,440
безопасного обращения с
указателями в языке C.

1206
00:53:23,440 --> 00:53:26,470
В жизни всё еще
сложнее, особенно

1207
00:53:26,470 --> 00:53:30,600
если вы используете
структуры и объединения.

1208
00:53:30,600 --> 00:53:32,075
Представьте, что у вас
есть объединение.

1209
00:53:32,075 --> 00:53:35,462
Оно выглядит следющим
образом.

1210
00:53:35,462 --> 00:53:38,941
В нем есть несколько
целочисленных значений.

1211
00:53:38,941 --> 00:53:43,414
И некая структура.

1212
00:53:43,414 --> 00:53:46,396
Внутри неё также два
целочисленных значения.

1213
00:53:46,396 --> 00:53:59,600


1214
00:53:59,600 --> 00:54:02,510
Не забывайте, как
работает union -

1215
00:54:02,510 --> 00:54:04,910
он выделяет максимальный размер

1216
00:54:04,910 --> 00:54:07,184
для наибольшего элемента.

1217
00:54:07,184 --> 00:54:08,600
В каждый конкретный
момент вы ожидаете, что

1218
00:54:08,600 --> 00:54:11,320
действительной будет
либо эта переменная i,

1219
00:54:11,320 --> 00:54:14,810
либо эта структура s,
но не обе сразу.

1220
00:54:14,810 --> 00:54:18,694
Представьте, что у вас есть код,
который делает что-то такое.

1221
00:54:18,694 --> 00:54:21,540


1222
00:54:21,540 --> 00:54:26,414
Вы используете указатель,
чтобы получить этот адрес.

1223
00:54:26,414 --> 00:54:33,218


1224
00:54:33,218 --> 00:54:37,990
Я взял указатель на int, чтобы
получить адрес из объединения u

1225
00:54:37,990 --> 00:54:40,800
в структуре s переменной k.

1226
00:54:40,800 --> 00:54:45,920
Этот указатель, строго говоря,
в пределах границ.

1227
00:54:45,920 --> 00:54:47,910
Указывает в память, выделенную
для этого объекта.

1228
00:54:47,910 --> 00:54:49,280
Ничего неправильного.

1229
00:54:49,280 --> 00:54:51,960
Но что в данный момент
выполнения программы

1230
00:54:51,960 --> 00:54:54,700
представляет собой
объединение - одно из этого,

1231
00:54:54,700 --> 00:54:56,470
или из этого?

1232
00:54:56,470 --> 00:54:58,200
Сложно сказать.

1233
00:54:58,200 --> 00:55:01,720
В результате этой двусмысмысленной 
семантики указателей,

1234
00:55:01,720 --> 00:55:05,730
которая обычно всплывает
в программах на C,

1235
00:55:05,730 --> 00:55:09,300
подход проверки границ
может дать нам лишь

1236
00:55:09,300 --> 00:55:12,540
очень слабое представление
о корректности указателя.

1237
00:55:12,540 --> 00:55:16,840
И это представление
следует принимать как есть.

1238
00:55:16,840 --> 00:55:23,995


1239
00:55:23,995 --> 00:55:32,860
Если у нас есть 
указатель p1, который

1240
00:55:32,860 --> 00:55:50,530
получен из базового
указателя p, то p1

1241
00:55:50,530 --> 00:56:07,604
используется только для
адресации памяти,

1242
00:56:07,604 --> 00:56:08,812
которая принадлежит
базовому указателю.

1243
00:56:08,812 --> 00:56:17,620


1244
00:56:17,620 --> 00:56:20,850
Для указателя p1,
который

1245
00:56:20,850 --> 00:56:23,200
получен из
базового p,

1246
00:56:23,200 --> 00:56:25,850
p1 используется только для
адресации памяти,

1247
00:56:25,850 --> 00:56:27,680
принадлежащей p.

1248
00:56:27,680 --> 00:56:31,880
Помните, что этот вариант
хуже, чем контроль за соблюдением

1249
00:56:31,880 --> 00:56:34,380
полностью корректной
семантики указателей.

1250
00:56:34,380 --> 00:56:36,380
Из-за этого могут,
например, появиться

1251
00:56:36,380 --> 00:56:41,244
странные моменты,
вроде этого объединения.

1252
00:56:41,244 --> 00:56:43,160
Возможно, в некоторой
точке программы

1253
00:56:43,160 --> 00:56:45,380
не будет корректно
указывать на

1254
00:56:45,380 --> 00:56:49,150
это конкретное значение
в объединении.

1255
00:56:49,150 --> 00:56:53,500
Так что, это указатель
как минимум неустойчивый.

1256
00:56:53,500 --> 00:56:59,490
И возможно, как в примере
выше, его создание

1257
00:56:59,490 --> 00:57:02,660
нарушит семантику

1258
00:57:02,660 --> 00:57:04,600
сетевого сообщения,
хранящегося в x.

1259
00:57:04,600 --> 00:57:07,710
Но, по крайней мере, вы не попадаете
в случайный участок памяти.

1260
00:57:07,710 --> 00:57:11,221
Вы взаимодействуете с памятью,
которая принадлежит вам.

1261
00:57:11,221 --> 00:57:13,470
В мире C это уже
считается успехом.

1262
00:57:13,470 --> 00:57:16,949


1263
00:57:16,949 --> 00:57:17,990
Вот основная идея.

1264
00:57:17,990 --> 00:57:20,750
Теперь, проблема с
обеспечением соблюдения этих

1265
00:57:20,750 --> 00:57:24,103
типов семантики в том,
что во многих случаях

1266
00:57:24,103 --> 00:57:26,132
вам потребуется помощь
от компилятора.

1267
00:57:26,132 --> 00:57:27,590
Да, вам потребуется помощь
от компилятора.

1268
00:57:27,590 --> 00:57:30,640
Вам необходимо
перекомпилировать программу

1269
00:57:30,640 --> 00:57:32,346
чтобы проследить за соблюдением
данной семантики.

1270
00:57:32,346 --> 00:57:34,836
Это может ограничить
обратную совместимость.

1271
00:57:34,836 --> 00:57:38,520
Но это основная концепция
в проверке границ.

1272
00:57:38,520 --> 00:57:41,230
Какими путями вы можете
реализовать проверку границ?

1273
00:57:41,230 --> 00:57:49,000


1274
00:57:49,000 --> 00:57:55,498
Одна простая концепция
называется "электрическое ограждение"
(electric fencing).

1275
00:57:55,498 --> 00:58:01,870


1276
00:58:01,870 --> 00:58:06,410
Концепция в том, что для
каждого объекта, под который

1277
00:58:06,410 --> 00:58:13,930
вы выделяете память в куче,
выделяется ограждающая

1278
00:58:13,930 --> 00:58:15,440
страница памяти, следующая
непосредственно за ним.

1279
00:58:15,440 --> 00:58:18,820
И вы устанавливаете для
неё защиту страницы, так что

1280
00:58:18,820 --> 00:58:22,104
если кто-то попытается обратиться
к ней, программа вылетит с ошибкой.

1281
00:58:22,104 --> 00:58:23,770
Аппаратная проверка скажет,
что это выход за границу

1282
00:58:23,770 --> 00:58:26,205
и программа остановится
прямо на этом месте.

1283
00:58:26,205 --> 00:58:29,195
Это очень простая вещь,
которую вы можете сделать.

1284
00:58:29,195 --> 00:58:31,316
Этот подход хорош
ещё тем, что

1285
00:58:31,316 --> 00:58:34,560
если вы используете
некорректное обращени

1286
00:58:34,560 --> 00:58:37,140
к памяти, это немедленно
приведет к завершению с ошибкой.

1287
00:58:37,140 --> 00:58:39,230
Если вы сталкивались с отладкой
программ на C и C++,

1288
00:58:39,230 --> 00:58:41,854
огромная проблема в том,
что очень часто вы нарушаете

1289
00:58:41,854 --> 00:58:46,300
данные в памяти. Они повреждаются
тихо и некоторое время всё хорошо,

1290
00:58:46,300 --> 00:58:49,130
пока позже всё не обвалится,
и только тогда

1291
00:58:49,130 --> 00:58:50,870
вы поймёте, что
что-то происходит.

1292
00:58:50,870 --> 00:58:52,380
Но при этом вы не
знаете, что именно.

1293
00:58:52,380 --> 00:58:54,390
Вы получаете так называемую
плавающую ошибку.

1294
00:58:54,390 --> 00:58:56,030
То есть ошибка проявляется
не в том месте, где она допущена.

1295
00:58:56,030 --> 00:58:58,150
И что хорошо в этом
подходе, как только

1296
00:58:58,150 --> 00:59:00,760
указатель попадает сюда -
БУМ!!!! Защитная страница,

1297
00:59:00,760 --> 00:59:03,060
всё взрывается.

1298
00:59:03,060 --> 00:59:05,130
Как вы думаете,
какие недостатки

1299
00:59:05,130 --> 00:59:06,937
у этого подхода?

1300
00:59:06,937 --> 00:59:08,520
[АУДИТОРИЯ] Он расходует
намного больше памяти.

1301
00:59:08,520 --> 00:59:10,049
[ПРОФЕССОР] Да, именно.

1302
00:59:10,049 --> 00:59:12,090
Представьте, что здесь

1303
00:59:12,090 --> 00:59:15,120
маленький, очень маленький
объект. И я выделяю целую

1304
00:59:15,120 --> 00:59:19,240
целую страницу памяти, чтобы
убедиться, что эта

1305
00:59:19,240 --> 00:59:21,133
малюсенькая штука не
подверглась атаке.

1306
00:59:21,133 --> 00:59:23,864
Это очень прожорливо
по памяти.

1307
00:59:23,864 --> 00:59:25,905
Но такое не используется

1308
00:59:25,905 --> 00:59:28,000
в конечном продукте.

1309
00:59:28,000 --> 00:59:29,890
Это может быть полезно
на этапе отладки, но

1310
00:59:29,890 --> 00:59:32,859
никогда не используйте
это в реальных программах.

1311
00:59:32,859 --> 00:59:33,650
Это понятно?

1312
00:59:33,650 --> 00:59:36,600
Этот метод электрического
ограждения очень-очень

1313
00:59:36,600 --> 00:59:39,222
прост для понимания.

1314
00:59:39,222 --> 00:59:42,340
[АУДИТОРИЯ] Почему выделяется
так много памяти? Это необходимость?

1315
00:59:42,340 --> 00:59:46,930
[ПРОФЕССОР] Размер
ограждающей страницы

1316
00:59:46,930 --> 00:59:50,142
зависит от аппаратного
обеспечения, осуществляющего

1317
00:59:50,142 --> 00:59:52,100
защиту памяти.

1318
00:59:52,100 --> 00:59:54,230
Вы выделяете определённый 
размер памяти,

1319
00:59:54,230 --> 00:59:56,359
это размер страницы
памяти

1320
00:59:56,359 --> 00:59:56,900
согласно спецификации.

1321
00:59:56,900 --> 00:59:58,886
Обычно это 4 килобайта.

1322
00:59:58,886 --> 01:00:00,260
Возвращаясь к
вашему вопросу,

1323
01:00:00,260 --> 01:00:02,910
здесь у нас очень
маленькое значение,

1324
01:00:02,910 --> 01:00:05,100
допустим, всего 2 байта.

1325
01:00:05,100 --> 01:00:08,292
И мы выделяем 4 килобайта,
чтобы его защитить.

1326
01:00:08,292 --> 01:00:11,638
[АУДИТОРИЯ] Мы защищаем
каждую переменную по отдельности,

1327
01:00:11,638 --> 01:00:13,027
или все сразу?

1328
01:00:13,027 --> 01:00:14,818
[ПРОФЕССОР] Да, извините,
под кучей я подразумевал

1329
01:00:14,818 --> 01:00:16,044
объекты в куче.

1330
01:00:16,044 --> 01:00:16,960
[АУДИТОРИЯ] То есть,
ограждается каждый объект?

1331
01:00:16,960 --> 01:00:18,834
[ПРОФЕССОР] Да, спасибо,
именно так.

1332
01:00:18,834 --> 01:00:20,504
При каждом вызове malloc

1333
01:00:20,504 --> 01:00:22,920
вы устанавливаете
ограждающую страницу.

1334
01:00:22,920 --> 01:00:25,110
[АУДИТОРИЯ] Вы устанавливаете
ограждающую страницу до и

1335
01:00:25,110 --> 01:00:25,990
после объекта, или только одну?

1336
01:00:25,990 --> 01:00:27,234
[ПРОФЕССОР] Вы можете устанавливать обе.

1337
01:00:27,234 --> 01:00:28,210
[АУДИТОРИЯ] [НЕРАЗБОРЧИВО]

1338
01:00:28,210 --> 01:00:30,260


1339
01:00:30,260 --> 01:00:31,260
[ПРОФЕССОР] Да, вы правы

1340
01:00:31,260 --> 01:00:31,740
[АУДИТОРИЯ] [НЕРАЗБОРЧИВО]

1341
01:00:31,740 --> 01:00:33,480
[ПРОФЕССОР] Да, вы правы,
можно установить обе страницы.

1342
01:00:33,480 --> 01:00:34,979
Единственное что, мы зависим

1343
01:00:34,979 --> 01:00:37,030
от размера объекта.

1344
01:00:37,030 --> 01:00:40,010
То есть, сейчас вы определяете
два ограждающих блока, так...

1345
01:00:40,010 --> 01:00:42,610
Это очень быстро выйдет
из под контроля,

1346
01:00:42,610 --> 01:00:46,615
потому, как вам надо вести учет
всего выделенного и используемого.

1347
01:00:46,615 --> 01:00:48,571
В общем, основная
идея такая.

1348
01:00:48,571 --> 01:00:58,351


1349
01:00:58,351 --> 01:01:02,280
Ещё один подход,
который мы рассмотрим -

1350
01:01:02,280 --> 01:01:07,028
называется "толстый указатель"

1351
01:01:07,028 --> 01:01:11,990


1352
01:01:11,990 --> 01:01:13,490
Идея в том, чтобы

1353
01:01:13,490 --> 01:01:16,280
модифицировать представление
указателя,

1354
01:01:16,280 --> 01:01:18,390
включив в него информацию
о границах.

1355
01:01:18,390 --> 01:01:27,290
Если вы посмотрите на
ваш обычный 32-битный указатель,

1356
01:01:27,290 --> 01:01:28,430
как он выглядит?

1357
01:01:28,430 --> 01:01:30,128
Правильно, как 32 бита.

1358
01:01:30,128 --> 01:01:32,842
В них хранится адрес.

1359
01:01:32,842 --> 01:01:33,341
Так...

1360
01:01:33,341 --> 01:01:41,116
А если вы посмотрите,
на толстый указатель,

1361
01:01:41,116 --> 01:01:42,740
то увидите, что в нём

1362
01:01:42,740 --> 01:01:46,710
4 байта определяющих начало,

1363
01:01:46,710 --> 01:01:50,580


1364
01:01:50,580 --> 01:01:57,143
и ещё 4 байта определяющих конец.

1365
01:01:57,143 --> 01:01:59,393
Другими словами, здесь указано
где он может находиться

1366
01:01:59,393 --> 01:02:02,000
Здесь начало,
а здесь конец.

1367
01:02:02,000 --> 01:02:09,125
И дальше идет 4 байта -
текущий адрес.

1368
01:02:09,125 --> 01:02:12,660


1369
01:02:12,660 --> 01:02:14,220
Он определяет, куда
именно в этих границах

1370
01:02:14,220 --> 01:02:16,500
смотрит указатель.

1371
01:02:16,500 --> 01:02:20,550
Происходит следующее:
компилятор генерирует код

1372
01:02:20,550 --> 01:02:24,530
таким образом, что когда вы
обращаетесь к толстым указателям,

1373
01:02:24,530 --> 01:02:26,655
они обновляются, но при
этом происходит проверка

1374
01:02:26,655 --> 01:02:28,109
указанных границ, чтобы
убедиться, что при

1375
01:02:28,109 --> 01:02:30,220
обновлении не произойдет
ничего плохого.

1376
01:02:30,220 --> 01:02:33,740
Для примера возьмем
вот такой код.

1377
01:02:33,740 --> 01:02:42,240


1378
01:02:42,240 --> 01:02:47,780
Определяем указатель и
выделяем под него 8 байт.

1379
01:02:47,780 --> 01:02:49,880
Предполагаем, что используется
32-битная архитектура

1380
01:02:49,880 --> 01:02:53,480
и он указывает на
2 целых числа.

1381
01:02:53,480 --> 01:02:59,277
Дальше идёт некий
цикл while, который

1382
01:02:59,277 --> 01:03:05,138
присваивает некое значение
по адресу указателя

1383
01:03:05,138 --> 01:03:11,520
и увеличивает указатель -
вы видите,

1384
01:03:11,520 --> 01:03:13,830
что текущий адрес указателя

1385
01:03:13,830 --> 01:03:18,700
в этой точке кода
указывает на начало блока.

1386
01:03:18,700 --> 01:03:21,930
При каждой итерации

1387
01:03:21,930 --> 01:03:24,067
мы проверяем границу

1388
01:03:24,067 --> 01:03:26,700
при увеличении указателя.

1389
01:03:26,700 --> 01:03:29,100
В этой точке мы
разыменовываем указатель.

1390
01:03:29,100 --> 01:03:32,425
Мы можем проверить
и увидеть, что текущий адрес

1391
01:03:32,425 --> 01:03:34,748
указателя находится
в этой зоне.

1392
01:03:34,748 --> 01:03:36,456
Если это не так, здесь
генерируется исключение

1393
01:03:36,456 --> 01:03:39,180
и так далее.

1394
01:03:39,180 --> 01:03:41,765
Итак, где это
применимо?

1395
01:03:41,765 --> 01:03:45,230
Это применимо в новом коде,
который генерирует компилятор.

1396
01:03:45,230 --> 01:03:48,019
На форуме поднялся вопрос,

1397
01:03:48,019 --> 01:03:49,435
некоторые спрашивали,

1398
01:03:49,435 --> 01:03:52,100
что такое - инструментированный код?

1399
01:03:52,100 --> 01:03:54,359
Когда я говорю это,
имею ввиду, что компилятор

1400
01:03:54,359 --> 01:03:56,442
генерирует новый код -
представьте, что

1401
01:03:56,442 --> 01:03:58,530
это вы видите, как
программист.

1402
01:03:58,530 --> 01:04:02,010
Но перед тем, как эта
операция реально выполнится,

1403
01:04:02,010 --> 01:04:05,250
компилятор вставляет здесь
некоторый новый код на C,

1404
01:04:05,250 --> 01:04:07,835
который проверяет
эти границы.

1405
01:04:07,835 --> 01:04:09,815
И если что-то выходит
за пределы границ

1406
01:04:09,815 --> 01:04:12,785
он производит выход, или
прерывает программу, или что-то вроде.

1407
01:04:12,785 --> 01:04:14,493
В этом случае говорят, что

1408
01:04:14,493 --> 01:04:15,440
это инструментированный код.

1409
01:04:15,440 --> 01:04:17,960
То есть, вы берете исходный
код программы на С,

1410
01:04:17,960 --> 01:04:20,424
добавляете некие новые
фрагменты кода на С и

1411
01:04:20,424 --> 01:04:22,690
компилируете это всё
в вашу программу.

1412
01:04:22,690 --> 01:04:24,823
Основная идея, лежащая
в основе толстых указателей,

1413
01:04:24,823 --> 01:04:26,860
очень проста.

1414
01:04:26,860 --> 01:04:29,520
Но у него есть
несколько недостатков.

1415
01:04:29,520 --> 01:04:32,465
Самый большой 
недостаток в том, что

1416
01:04:32,465 --> 01:04:34,870
указатели становятся
очень большими.

1417
01:04:34,870 --> 01:04:37,370
Это означает, что вы
не можете просто

1418
01:04:37,370 --> 01:04:40,140
взять толстый указатель
и передать его в неизменном

1419
01:04:40,140 --> 01:04:41,849
виде в немодифицированную
библиотеку.

1420
01:04:41,849 --> 01:04:43,515
Так как она ожидает

1421
01:04:43,515 --> 01:04:46,220
что указатель будет определённого
размера, а мы даём ей это.

1422
01:04:46,220 --> 01:04:48,674
Это как попытка её взорвать.

1423
01:04:48,674 --> 01:04:50,465
Также у нас будут проблемы,
если мы захотим включить

1424
01:04:50,465 --> 01:04:52,840
этот тип указателей в структуры
или что-то подобное,

1425
01:04:52,840 --> 01:04:56,180
потому что это изменит
размер структуры.

1426
01:04:56,180 --> 01:04:58,110
В коде на С очень
популярная вещь -

1427
01:04:58,110 --> 01:05:00,016
взять размер структуры

1428
01:05:00,016 --> 01:05:01,974
и в зависимости от него
что-то сделать.

1429
01:05:01,974 --> 01:05:04,557
Например, зарезервировать
дисковое пространство

1430
01:05:04,557 --> 01:05:05,515
под структуру этого размера
и прочее.

1431
01:05:05,515 --> 01:05:07,837
В результате всё
это сломается.

1432
01:05:07,837 --> 01:05:11,740
Произойдёт это потому,
что указатель стал очень большой.

1433
01:05:11,740 --> 01:05:13,780
Ещё одно тонкое место
в том, что

1434
01:05:13,780 --> 01:05:17,810
толстый указатель
не может

1435
01:05:17,810 --> 01:05:21,500
быть изменен с использованием
элементарной операции.

1436
01:05:21,500 --> 01:05:24,630
В 32-битной архитектуре

1437
01:05:24,630 --> 01:05:27,310
если вы хотите записать
32-битное значение,

1438
01:05:27,310 --> 01:05:29,180
это делается посредством
элементарной операции.

1439
01:05:29,180 --> 01:05:33,270
Но сейчас эти указатели

1440
01:05:33,270 --> 01:05:34,590
размером в int[3], то есть
96 бит.

1441
01:05:34,590 --> 01:05:37,270
И если в коде используется
тот факт, что

1442
01:05:37,270 --> 01:05:39,780
указатель записывается посредством
элементарной операции,

1443
01:05:39,780 --> 01:05:41,830
то у вас могут возникнуть проблемы.

1444
01:05:41,830 --> 01:05:45,460
Ведь когда вы проводите проверку
границ при обновлении указателя,

1445
01:05:45,460 --> 01:05:48,460
вам необходимо посмотреть на
текущий указатель, посмотреть

1446
01:05:48,460 --> 01:05:49,960
сюда и только потом вы
его увеличиваете,

1447
01:05:49,960 --> 01:05:51,570
и так далее.

1448
01:05:51,570 --> 01:05:53,520
Это может привести к
ошибкам при распараллеливании,

1449
01:05:53,520 --> 01:05:55,728
если ваш код зависит от
использования элементарных

1450
01:05:55,728 --> 01:05:58,180
операций при записи.

1451
01:05:58,180 --> 01:05:59,770
Это понятно?

1452
01:05:59,770 --> 01:06:01,340
Но это один из подходов,
который вы можете использовать.

1453
01:06:01,340 --> 01:06:05,506
Хотя у него, как и у метода
электрического ограждения,

1454
01:06:05,506 --> 01:06:09,190
есть несколько неприятных
побочных эффектов, из-за которых

1455
01:06:09,190 --> 01:06:10,980
на практике его обычно
не используют.

1456
01:06:10,980 --> 01:06:14,660


1457
01:06:14,660 --> 01:06:19,470
Теперь мы можем поговорить
о проверке границ

1458
01:06:19,470 --> 01:06:22,165
с использованием теневой
инфраструктуры,

1459
01:06:22,165 --> 01:06:25,890
о которой я упоминал в печатном
материале по грубой проверке границ.

1460
01:06:25,890 --> 01:06:37,200
Основная идея теневой
структуры в том,

1461
01:06:37,200 --> 01:06:43,670
что для каждого
создаваемого объекта,

1462
01:06:43,670 --> 01:06:46,830
вы храните информацию о том,
насколько он велик.

1463
01:06:46,830 --> 01:06:53,650


1464
01:06:53,650 --> 01:06:58,860
Например, если
есть указатель,

1465
01:06:58,860 --> 01:07:03,763
и вы вызываете для
него malloc,

1466
01:07:03,763 --> 01:07:07,460
вы должны сохранить
размер этого объекта,

1467
01:07:07,460 --> 01:07:09,460
а если у вас есть
что-то вроде

1468
01:07:09,460 --> 01:07:15,984
статической переменной,
как эта,

1469
01:07:15,984 --> 01:07:18,109
компилятор может
автоматически определить

1470
01:07:18,109 --> 01:07:19,525
какие для неё будут

1471
01:07:19,525 --> 01:07:21,840
статические границы.

1472
01:07:21,840 --> 01:07:23,635
Для каждого из
этих указателей

1473
01:07:23,635 --> 01:07:31,415
вы должны каким-то образом
вмешаться в две операции.

1474
01:07:31,415 --> 01:07:34,600


1475
01:07:34,600 --> 01:07:36,635
В арифметику указателей.

1476
01:07:36,635 --> 01:07:41,290


1477
01:07:41,290 --> 01:07:49,930
Что-то вроде
q=p+7.

1478
01:07:49,930 --> 01:07:55,550
И в разыменование.

1479
01:07:55,550 --> 01:08:02,399
Например,
*q='a'

1480
01:08:02,399 --> 01:08:03,440
или что-то такое.

1481
01:08:03,440 --> 01:08:06,200


1482
01:08:06,200 --> 01:08:09,730
Возможно, вас заинтересовало,

1483
01:08:09,730 --> 01:08:13,690
почему мы не можем просто
положиться на проверку ссылок,

1484
01:08:13,690 --> 01:08:16,090
когда это происходит?

1485
01:08:16,090 --> 01:08:20,205
Зачем нам вмешиваться
именно в арифметику?

1486
01:08:20,205 --> 01:08:22,170
Но вопрос в другом.

1487
01:08:22,170 --> 01:08:23,711
Почему мы не можем
иметь дело

1488
01:08:23,711 --> 01:08:26,040
с указателями, а
вмешиваемся в операции?

1489
01:08:26,040 --> 01:08:29,684
Вы не можете просто
выдать ошибку,

1490
01:08:29,684 --> 01:08:34,120
если увидите, что в процессе вычислений
выходим за пределы границ,

1491
01:08:34,120 --> 01:08:37,040
потому, что в C указатель может
быть, а может и не быть в этих пределах.

1492
01:08:37,040 --> 01:08:40,939
Другими словами, в С и С++ часто
в промежуточных вычислениях

1493
01:08:40,939 --> 01:08:44,695
вы можете получить указатель,
который указывает за

1494
01:08:44,695 --> 01:08:47,569
границы объекта,

1495
01:08:47,569 --> 01:08:48,068
и это выступает
условием завершения.

1496
01:08:48,068 --> 01:08:49,910
То есть, вы проводите
итерации в объекте,

1497
01:08:49,910 --> 01:08:52,896
и как только натыкаетесь на
такой указатель, заканчиваете цикл,

1498
01:08:52,896 --> 01:08:54,076
или делаете что-то ещё.

1499
01:08:54,076 --> 01:08:56,908
Если мы просто
вмешаемся в арифметику,

1500
01:08:56,908 --> 01:08:58,890
то всегда будем провоцировать
аварийное завершение,

1501
01:08:58,890 --> 01:09:00,990
как только наткнёмся на указатель,
выходящий за границы,

1502
01:09:00,990 --> 01:09:04,060
это зачастую нарушит работу
корректных программ.

1503
01:09:04,060 --> 01:09:06,520
Поэтому мы не можем
просто вмешаться в это.

1504
01:09:06,520 --> 01:09:09,466
Вы можете сказать -
хорошо, но почему нельзя

1505
01:09:09,466 --> 01:09:12,442
просто вмешаться в работу
указателей и когда получим

1506
01:09:12,442 --> 01:09:14,430
предупреждение о выходе
за границы просто

1507
01:09:14,430 --> 01:09:15,845
проверить это и это?

1508
01:09:15,845 --> 01:09:17,470
Проблема в том,
как узнать,

1509
01:09:17,470 --> 01:09:18,636
что мы вышли
за границы?

1510
01:09:18,636 --> 01:09:21,279
Вычисление положения

1511
01:09:21,279 --> 01:09:24,089
позволит нам сказать
с уверенностью,

1512
01:09:24,089 --> 01:09:25,880
допустимо это здесь,
или нет.

1513
01:09:25,880 --> 01:09:27,340
Потому, что
вмешательство

1514
01:09:27,340 --> 01:09:29,960
в арифметику позволит
нам отследить,

1515
01:09:29,960 --> 01:09:31,517
где находится указатель

1516
01:09:31,517 --> 01:09:34,120
по отношению к начальному
положению.

1517
01:09:34,120 --> 01:09:36,146
Это основная идея.

1518
01:09:36,146 --> 01:09:41,740


1519
01:09:41,740 --> 01:09:45,480
Следующий вопрос,
как мы реализуем

1520
01:09:45,480 --> 01:09:46,730
проверку границ?

1521
01:09:46,730 --> 01:09:49,550


1522
01:09:49,550 --> 01:09:55,720
Нам нужен способ привязать
адрес конкретного указателя

1523
01:09:55,720 --> 01:10:00,640
к информации о границах
для этого указателя.

1524
01:10:00,640 --> 01:10:02,420
Имеющиеся решения

1525
01:10:02,420 --> 01:10:05,274
используют, например,
хэш-таблицу или дерево,

1526
01:10:05,274 --> 01:10:07,190
что позволяет проводит поиск

1527
01:10:07,190 --> 01:10:08,620
и определять границы.

1528
01:10:08,620 --> 01:10:11,899
Получая адрес указателя,
я провожу поиск

1529
01:10:11,899 --> 01:10:14,190
в этой структуре данных, и определяю,
какие установлены границы.

1530
01:10:14,190 --> 01:10:16,050
Получив эти границы, я
могу определить,

1531
01:10:16,050 --> 01:10:18,790
разрешать мне действие,
или нет.

1532
01:10:18,790 --> 01:10:21,917
Проблема заключается
в медленном поиске,

1533
01:10:21,917 --> 01:10:24,250
потому, что структура
данных - дерево

1534
01:10:24,250 --> 01:10:26,733
и нужно обойти много
веток, пока

1535
01:10:26,733 --> 01:10:29,409
не найдём значение.

1536
01:10:29,409 --> 01:10:31,200
Даже если это 
хэш-таблица,

1537
01:10:31,200 --> 01:10:33,880
при её переполнении приходится
следовать по цепочкам

1538
01:10:33,880 --> 01:10:36,740
или перестраивать таблицу,
или ещё что-нибудь.

1539
01:10:36,740 --> 01:10:40,160
Поэтому публикация о
грубой проверке границ,

1540
01:10:40,160 --> 01:10:42,585
которую мы сейчас
рассматриваем, описывает

1541
01:10:42,585 --> 01:10:45,800
очень эффективную структуру
данных, позволяющую отслеживать

1542
01:10:45,800 --> 01:10:49,480
границы и сделать их проверку
очень быстрой.

1543
01:10:49,480 --> 01:10:51,170
Рассмотрим это подробнее.

1544
01:10:51,170 --> 01:10:53,340
Но перед этим я
вкратце расскажу,

1545
01:10:53,340 --> 01:10:55,110
как работает buddy-алгоритм
выделения памяти,

1546
01:10:55,110 --> 01:10:56,985
потому что этот
момент встречается

1547
01:10:56,985 --> 01:10:58,480
во многих вопросах.

1548
01:10:58,480 --> 01:11:00,830
Вы увидите в этой публикации,

1549
01:11:00,830 --> 01:11:02,663
что она во многом не автономна,

1550
01:11:02,663 --> 01:11:05,580
то есть там используются понятия,
с которыми как предполагается вы знакомы,

1551
01:11:05,580 --> 01:11:07,135
но вы можете их не знать.

1552
01:11:07,135 --> 01:11:08,385
Пусть это вас не озадачивает.

1553
01:11:08,385 --> 01:11:10,076
Со мной это тоже
иногда происходит.

1554
01:11:10,076 --> 01:11:11,450
Публикация писалась
в расчете на читателя

1555
01:11:11,450 --> 01:11:12,991
с большим багажом
знаний,

1556
01:11:12,991 --> 01:11:14,500
так что пусть вас это
не тревожит.

1557
01:11:14,500 --> 01:11:16,616
К счастью сейчас
есть доступ в Интернет

1558
01:11:16,616 --> 01:11:17,572
и вы можете посмотреть
там то, что вам непонятно.

1559
01:11:17,572 --> 01:11:18,990
Можете представить, как
нелегко было вашим родителям?

1560
01:11:18,990 --> 01:11:19,534
Они просто не могли
понять некоторые вещи

1561
01:11:19,534 --> 01:11:21,182
и им оставалось лишь
смириться с этим.

1562
01:11:21,182 --> 01:11:25,915
Не бойтесь заглядывать
в Википедию,

1563
01:11:25,915 --> 01:11:27,335
по большей части там
всё верно написано.

1564
01:11:27,335 --> 01:11:30,210


1565
01:11:30,210 --> 01:11:37,600
Итак, как работает buddy-алгоритм
выделения памяти?

1566
01:11:37,600 --> 01:11:40,390
Вначале он рассматривает
нераспределённую память

1567
01:11:40,390 --> 01:11:44,196
как один большой блок.

1568
01:11:44,196 --> 01:11:44,870
ОК

1569
01:11:44,870 --> 01:11:47,810
Когда вы запрашиваете
меньший блок

1570
01:11:47,810 --> 01:11:51,662
для динамического выделения,
он пытается разбить

1571
01:11:51,662 --> 01:11:56,060
адресное пространство, используя
степени числа 2, пока не найдёт

1572
01:11:56,060 --> 01:11:57,603
блок достаточного размера.

1573
01:11:57,603 --> 01:12:00,860
Пусть мы запрашиваем
выделение памяти

1574
01:12:00,860 --> 01:12:06,835
a=malloc(28)

1575
01:12:06,835 --> 01:12:07,440
28 байт.

1576
01:12:07,440 --> 01:12:09,023
Пусть в нашем
искусственном примере

1577
01:12:09,023 --> 01:12:11,590
всего 128 байт памяти.

1578
01:12:11,590 --> 01:12:13,603
buddy-алгоритм смотрит на
это и говорит:

1579
01:12:13,603 --> 01:12:14,820
хорошо, у меня есть
128 байт памяти,

1580
01:12:14,820 --> 01:12:17,320
но это слишком расточительно -
выделить весь этот кусок

1581
01:12:17,320 --> 01:12:18,710
когда необходимо 28 байт.

1582
01:12:18,710 --> 01:12:20,780
Я разобью этот кусок
пополам

1583
01:12:20,780 --> 01:12:24,870
и посмотрю, есть ли меньший
блок, достаточный по размеру.

1584
01:12:24,870 --> 01:12:29,290
Всё хорошо, есть блоки 0-63
и 64-127.

1585
01:12:29,290 --> 01:12:31,932
Но эти блоки всё-равно
слишком большие.

1586
01:12:31,932 --> 01:12:33,970
buddy-алгоритм хочет

1587
01:12:33,970 --> 01:12:36,660
найти блок
такой, что

1588
01:12:36,660 --> 01:12:38,996
данные объекта,
28 байт,

1589
01:12:38,996 --> 01:12:42,000
будут занимать не менее
половины выделенного блока.

1590
01:12:42,000 --> 01:12:44,470
buddy-алгоритм говорит:
этот блок всё ещё

1591
01:12:44,470 --> 01:12:45,224
слишком большой.

1592
01:12:45,224 --> 01:12:47,640
Всё, что нужно сделать -
это опять

1593
01:12:47,640 --> 01:12:51,940
разделить область памяти.

1594
01:12:51,940 --> 01:12:58,050
Получается 0-31, олично!

1595
01:12:58,050 --> 01:13:02,160
28 байт - больше половины

1596
01:13:02,160 --> 01:13:02,830
этого блока.

1597
01:13:02,830 --> 01:13:08,726
Теперь это блок
выделяется для a

1598
01:13:08,726 --> 01:13:10,940
и здесь она получает
этот адрес.

1599
01:13:10,940 --> 01:13:17,910
Теперь, скажем, пришел
запрос b=malloc(50),

1600
01:13:17,910 --> 01:13:23,030
то есть b необходимо 50 байт.

1601
01:13:23,030 --> 01:13:26,485
Происходит следующее:
buddy-алгоритм говорит -

1602
01:13:26,485 --> 01:13:29,410
хорошо, у меня уже
есть есть такой блок,

1603
01:13:29,410 --> 01:13:31,015
он достаточно большой,

1604
01:13:31,015 --> 01:13:33,270
50 байт - это больше
половины его размера

1605
01:13:33,270 --> 01:13:35,240
я его выделяю.

1606
01:13:35,240 --> 01:13:41,740
У нас есть конфигурация,
в которой a здесь,

1607
01:13:41,740 --> 01:13:44,990
b здесь,

1608
01:13:44,990 --> 01:13:51,635
и пришел ещё один запрос
на 20 байт.

1609
01:13:51,635 --> 01:13:53,955


1610
01:13:53,955 --> 01:13:55,580
Это предельно ясно,

1611
01:13:55,580 --> 01:13:57,910
мы можем расположить
его здесь

1612
01:13:57,910 --> 01:14:03,496
И это примет
вот такой вид.

1613
01:14:03,496 --> 01:14:07,280
Интересное начинается,
когда мы освобождаем блок.

1614
01:14:07,280 --> 01:14:09,776
Если вы освободите блоки,

1615
01:14:09,776 --> 01:14:11,650
расположенные друг за
другом и одинакового размера,

1616
01:14:11,650 --> 01:14:13,310
buddy-алгоритм
объединит их

1617
01:14:13,310 --> 01:14:15,700
в блок в 2 раза
большего размера.

1618
01:14:15,700 --> 01:14:29,720
Если мы освободим, допустим,
с,  то попадем в ситуацию,

1619
01:14:29,720 --> 01:14:33,361
когда объединение невозможно,
так как есть лишь один блок,

1620
01:14:33,361 --> 01:14:35,110
с которым он может быть объединён.

1621
01:14:35,110 --> 01:14:37,330
Он того же размера,
но он ещё занят.

1622
01:14:37,330 --> 01:14:49,830
Если мы выполним
free(a), то

1623
01:14:49,830 --> 01:14:52,480
получим следующую
ситуацию.

1624
01:14:52,480 --> 01:14:56,120
Теперь 2 блока по
32 байта

1625
01:14:56,120 --> 01:14:59,850
объединятся в один размером 64 байта,
а этот, также размером 64,

1626
01:14:59,850 --> 01:15:01,405
останется здесь.

1627
01:15:01,405 --> 01:15:03,840
Это называется buddy-алгоритм
(дружественный алгоритм) потому, что

1628
01:15:03,840 --> 01:15:06,560
когда у вас есть два
соседних блока

1629
01:15:06,560 --> 01:15:08,995
одинакового размера
и они могут

1630
01:15:08,995 --> 01:15:11,960
быть объединены, образовав
выровненный блок,

1631
01:15:11,960 --> 01:15:14,840
система объединит одного
'друга' с другим,

1632
01:15:14,840 --> 01:15:18,253
и создаст новый блок
в 2 раза большего размера.

1633
01:15:18,253 --> 01:15:20,510
Что хорошо в этой системе -

1634
01:15:20,510 --> 01:15:26,322
это то, что легко
определить, где 'друг'.

1635
01:15:26,322 --> 01:15:28,314
Система грубой оценки
границ работает потому,

1636
01:15:28,314 --> 01:15:31,287
что в buddy-алгоритме
очень простая арифметика.

1637
01:15:31,287 --> 01:15:32,870
Не буду углубляться в детали.

1638
01:15:32,870 --> 01:15:34,744
В общих чертах buddy-
алгоритм работает так.

1639
01:15:34,744 --> 01:15:37,710
Это понятно?

1640
01:15:37,710 --> 01:15:39,210
И ещё один вопрос,
который всплывает

1641
01:15:39,210 --> 01:15:43,560
во многих обсуждениях,
не слишком ли он расточителен?

1642
01:15:43,560 --> 01:15:47,510
Например, представьте,
что в начале пришел запрос

1643
01:15:47,510 --> 01:15:52,484
на выделение 65 байт.

1644
01:15:52,484 --> 01:15:54,890
Если есть запрос на 65 байт,

1645
01:15:54,890 --> 01:15:57,368
я выделю здесь весь блок,

1646
01:15:57,368 --> 01:16:00,034
больше не останется
динамической памяти

1647
01:16:00,034 --> 01:16:00,742
и мы не сможем больше
ничего выделить.

1648
01:16:00,742 --> 01:16:02,894
Отвечаю - да,
он расточителен.

1649
01:16:02,894 --> 01:16:04,560
Но это компромисс.

1650
01:16:04,560 --> 01:16:07,060
Зато очень просто выполнять
вычисления и производить

1651
01:16:07,060 --> 01:16:08,530
объединение блоков
и всё остальное.

1652
01:16:08,530 --> 01:16:10,520
Если вы хотите
улучшить структуру

1653
01:16:10,520 --> 01:16:12,021
выделяемой памяти, для этого
есть другие алгоритмы.

1654
01:16:12,021 --> 01:16:13,728
Но это выходит за рамки
нашей сегодняшней лекции.

1655
01:16:13,728 --> 01:16:15,420
Если хотите, мы можем
обсудить это после занятий.

1656
01:16:15,420 --> 01:16:19,190
В общем, так работает

1657
01:16:19,190 --> 01:16:21,300
buddy-алгоритм.

1658
01:16:21,300 --> 01:16:26,126
Что же тогда делает
система грубой оценки границ?

1659
01:16:26,126 --> 01:16:29,078
Она основывается на
некоторых трюках.

1660
01:16:29,078 --> 01:16:41,400


1661
01:16:41,400 --> 01:16:52,830
Первый - каждое выделение памяти
округляется до степени двойки

1662
01:16:52,830 --> 01:17:06,245
и вы можете привязать запрос
также к степени двойки.

1663
01:17:06,245 --> 01:17:13,129


1664
01:17:13,129 --> 01:17:15,295
buddy-алгоритм хорош тем,

1665
01:17:15,295 --> 01:17:17,205
что предоставляет вам
такую возможность.

1666
01:17:17,205 --> 01:17:18,880
Он работает именно
таким образом.

1667
01:17:18,880 --> 01:17:21,970
Он так выделяет

1668
01:17:21,970 --> 01:17:23,930
и освобождает память.

1669
01:17:23,930 --> 01:17:27,880
Второй трюк в системе
грубой оценки границ -

1670
01:17:27,880 --> 01:17:41,530
каждая граница выражается
в виде логарифма с основанием 2

1671
01:17:41,530 --> 01:17:44,260
от выделяемого размера.

1672
01:17:44,260 --> 01:17:48,290


1673
01:17:48,290 --> 01:17:51,710
Что это означает и почему
мы можем это использовать?

1674
01:17:51,710 --> 01:17:53,950
Ещё раз, все размеры
выделяемых блоков

1675
01:17:53,950 --> 01:17:56,070
являются степенями двойки.

1676
01:17:56,070 --> 01:17:59,512
Нам не нужно много бит для
представления

1677
01:17:59,512 --> 01:18:01,470
размера выделенного блока.

1678
01:18:01,470 --> 01:18:10,602
Например, если выделено
16 бит, то

1679
01:18:10,602 --> 01:18:14,110
нам необходимо 4
(логарифм от этого - 4)

1680
01:18:14,110 --> 01:18:17,420
бита для хранения этой информации.

1681
01:18:17,420 --> 01:18:19,340
Это понятно?

1682
01:18:19,340 --> 01:18:21,350
Следующий популярный вопрос.

1683
01:18:21,350 --> 01:18:23,770
Почему нам необходимо
небольшое количество бит -

1684
01:18:23,770 --> 01:18:25,570
потому, что мы используем

1685
01:18:25,570 --> 01:18:30,043
только определённые размеры
выделяемой памяти.

1686
01:18:30,043 --> 01:18:31,626
У вас может быть
выделено, например,

1687
01:18:31,626 --> 01:18:33,987
16 бит или 32 бита,

1688
01:18:33,987 --> 01:18:36,136
но не, допустим, 33 бита.

1689
01:18:36,136 --> 01:18:38,930


1690
01:18:38,930 --> 01:18:41,730
Третья особенность системы
грубой оценки границ -

1691
01:18:41,730 --> 01:19:04,818
хранение информации в линейном
массиве 1 байт на элемент,

1692
01:19:04,818 --> 01:19:12,258
с детализацией информации

1693
01:19:12,258 --> 01:19:13,780
с точностью до слота.

1694
01:19:13,780 --> 01:19:17,240


1695
01:19:17,240 --> 01:19:24,530
В публикации используется
ширина слота 16 байт.

1696
01:19:24,530 --> 01:19:26,170
И даже если для вас

1697
01:19:26,170 --> 01:19:28,336
будет неясно назначение
хотя бы 1 бита

1698
01:19:28,336 --> 01:19:31,030
в публикации, если
вы с этим не разберётесь,

1699
01:19:31,030 --> 01:19:33,380
то публикацию в целом
будет очень сложно понять.

1700
01:19:33,380 --> 01:19:40,190
Итак, у нас размер
слота 16 байт,

1701
01:19:40,190 --> 01:19:48,350
что произойдет, если
мы сделаем p=malloc(16)?

1702
01:19:48,350 --> 01:19:51,495
В таблице границ
делаем следующее:

1703
01:19:51,495 --> 01:20:02,600
берем размер выделенной памяти
и логарифмируем по основанию 2,

1704
01:20:02,600 --> 01:20:04,240
получаем 4.

1705
01:20:04,240 --> 01:20:05,926
И записываем это значение в ячейку
с номером [адрес_указателя/размер_слота]

1706
01:20:05,926 --> 01:20:11,830
то есть помещаем полученный
логарифм в таблицу.

1707
01:20:11,830 --> 01:20:12,976
Это понятно?

1708
01:20:12,976 --> 01:20:14,350
ОК, есть сложный момент,

1709
01:20:14,350 --> 01:20:16,372
скажем, у вас есть что-то
вроде этого.

1710
01:20:16,372 --> 01:20:22,570


1711
01:20:22,570 --> 01:20:26,280
Допустим, вы
выделили 32 байта.

1712
01:20:26,280 --> 01:20:29,050
Что произойдёт с
таблицей границ?

1713
01:20:29,050 --> 01:20:31,640
Здесь мы обновим
таблицу границ,

1714
01:20:31,640 --> 01:20:37,920
поместив в p, извините, в t
информацию о размере.

1715
01:20:37,920 --> 01:20:39,545
Но она входит в таблицу
границ дважды.

1716
01:20:39,545 --> 01:20:44,970


1717
01:20:44,970 --> 01:20:47,706
Один раз для
первого слота памяти,

1718
01:20:47,706 --> 01:20:49,085
который занял выделенный
участок.

1719
01:20:49,085 --> 01:20:56,645
Второй раз - для второго
слота, который он занимает.

1720
01:20:56,645 --> 01:21:00,740


1721
01:21:00,740 --> 01:21:03,740
Ещё раз, 32 - это
выделенный размер,

1722
01:21:03,740 --> 01:21:06,404
это - логарифм от
выделенного размера.

1723
01:21:06,404 --> 01:21:09,250
Для двух слотов, которые
эта память занимает,

1724
01:21:09,250 --> 01:21:11,482
мы производим две записи
в таблицу границ.

1725
01:21:11,482 --> 01:21:13,815
Это понятно?

1726
01:21:13,815 --> 01:21:15,190
Это ключевой момент

1727
01:21:15,190 --> 01:21:16,150
для многих,

1728
01:21:16,150 --> 01:21:18,650
от которого зависит, будет
публикация понята, или нет.

1729
01:21:18,650 --> 01:21:21,667
Информация о размере
записывается в таблицу границ

1730
01:21:21,667 --> 01:21:22,625
несколько раз.

1731
01:21:22,625 --> 01:21:22,970
[АУДИТОРИЯ] Можете ли вы
повторить это ещё раз для меня?

1732
01:21:22,970 --> 01:21:23,880
[ПРОФЕССОР] Простите?

1733
01:21:23,880 --> 01:21:25,380
[АУДИТОРИЯ] Можете ли вы
повторить это?

1734
01:21:25,380 --> 01:21:26,326
[ПРОФЕССОР] Да,
конечно, конечно.

1735
01:21:26,326 --> 01:21:27,826
Основная идея следующая.

1736
01:21:27,826 --> 01:21:32,290
Здесь у вас таблица границ,

1737
01:21:32,290 --> 01:21:34,230
и в ней куча записей.

1738
01:21:34,230 --> 01:21:38,360
Нам необходимо,
чтобы записи покрывали

1739
01:21:38,360 --> 01:21:41,167
всё пространство массива,
относящееся к выделенной p памяти.

1740
01:21:41,167 --> 01:21:44,900
В этом случае всё
очень просто,

1741
01:21:44,900 --> 01:21:46,744
потому, что размер
соответствует одному слоту.

1742
01:21:46,744 --> 01:21:48,447
А вот здесь размер соответствует
нескольким слотам.

1743
01:21:48,447 --> 01:21:50,363
Происходит следующее,
у нас есть указатель,

1744
01:21:50,363 --> 01:21:53,570
перемещающийся в диапазоне,
выделенном для p.

1745
01:21:53,570 --> 01:21:55,700
И у нас есть некие значения
в таблице, соответствующие

1746
01:21:55,700 --> 01:21:58,910
каждому из слотов

1747
01:21:58,910 --> 01:21:59,410
диапазона, выделенного p.

1748
01:21:59,410 --> 01:22:01,792
И этот момент в публикации

1749
01:22:01,792 --> 01:22:03,750
может сбить с толку.

1750
01:22:03,750 --> 01:22:06,140
Не вдаваясь в подробности,

1751
01:22:06,140 --> 01:22:07,568
в общем это работает так.

1752
01:22:07,568 --> 01:22:10,430


1753
01:22:10,430 --> 01:22:20,357
Вооруженные механизмом
таблицы границ,

1754
01:22:20,357 --> 01:22:30,806
что мы будем делать, столкнувшись
с примерно таким кодом на C?

1755
01:22:30,806 --> 01:22:36,870
У вас есть указатель p1,
полученный из указателя p,

1756
01:22:36,870 --> 01:22:40,210
увеличенного на некоторую
переменную i.

1757
01:22:40,210 --> 01:22:47,340
Как получить размер выделенной
памяти, принадлежащей p?

1758
01:22:47,340 --> 01:22:56,620
Вы обращаетесь к таблице,
используя здесь такую адресацию.

1759
01:22:56,620 --> 01:23:05,910


1760
01:23:05,910 --> 01:23:09,890
Размер области, выделенной p,

1761
01:23:09,890 --> 01:23:11,910
равен 1 побитово
сдвинутой влево

1762
01:23:11,910 --> 01:23:14,420
на значение из таблицы
по индексу, равному

1763
01:23:14,420 --> 01:23:17,475
значению указателя,
побитово сдвинутому вправо

1764
01:23:17,475 --> 01:23:19,360
на двоичный логарифм
от размера слота.

1765
01:23:19,360 --> 01:23:21,600
Эта арифметика работает
по тому же принципу,

1766
01:23:21,600 --> 01:23:24,385
по которому мы формировали
данные об указателе

1767
01:23:24,385 --> 01:23:27,730
в таблице границ.

1768
01:23:27,730 --> 01:23:32,620
Вот эта штука -
это и есть

1769
01:23:32,620 --> 01:23:33,765
двоичный логарифм
размера слота.

1770
01:23:33,765 --> 01:23:36,130
А вот это выражение
разворачивает это

1771
01:23:36,130 --> 01:23:39,280
в обычное значение
размера выделенной памяти.

1772
01:23:39,280 --> 01:23:42,120
Например, если под
этот указатель было

1773
01:23:42,120 --> 01:23:46,890
выделено 32 байта,

1774
01:23:46,890 --> 01:23:50,295
то здесь, в таблице,
будет 5,

1775
01:23:50,295 --> 01:23:52,660
и сдвиг влево -
это то, что поможет

1776
01:23:52,660 --> 01:23:54,076
нам получить опять

1777
01:23:54,076 --> 01:23:57,810
значение 32 из этого.

1778
01:23:57,810 --> 01:23:58,680
ОК.

1779
01:23:58,680 --> 01:24:06,738
И если мы хотим
найти базовый указатель,

1780
01:24:06,738 --> 01:24:14,930
рассчитываем его из текущего
указателя p

1781
01:24:14,930 --> 01:24:24,549
как base=p&~(size-1)

1782
01:24:24,549 --> 01:24:26,590
Что при этом происходит?

1783
01:24:26,590 --> 01:24:29,700
Это даст нам маску,

1784
01:24:29,700 --> 01:24:34,280
и эта маска позволит нам
восстановить базовый указатель.

1785
01:24:34,280 --> 01:24:40,100
Допустим, наш размер 16,

1786
01:24:40,100 --> 01:24:49,768
в двоичном виде это
выглядит так,

1787
01:24:49,768 --> 01:24:51,642
и с этой стороны
много нулей.

1788
01:24:51,642 --> 01:24:55,300
Здесь единица и дальше
ещё несколько нулей.

1789
01:24:55,300 --> 01:25:07,394
Если мы посмотрим на
побитовую инверсию (16 - 1)

1790
01:25:07,394 --> 01:25:09,070
то - ой, простите...

1791
01:25:09,070 --> 01:25:12,450
Если мы посмотрим на (16 - 1),
как это будет выглядеть?

1792
01:25:12,450 --> 01:25:19,620
(16 - 1) будет выглядеть

1793
01:25:19,620 --> 01:25:20,270
как-то так.

1794
01:25:20,270 --> 01:25:21,040
ОК

1795
01:25:21,040 --> 01:25:26,193
Если мы возьмём
побитовую инверсию

1796
01:25:26,193 --> 01:25:27,443
от этого, что это
нам даст?

1797
01:25:27,443 --> 01:25:32,536


1798
01:25:32,536 --> 01:25:33,530
Правильно, в бинарном
виде так...

1799
01:25:33,530 --> 01:25:37,290
Итак, вот это вот
это поможет нам очистить

1800
01:25:37,290 --> 01:25:40,860
биты, которые являются
смещением

1801
01:25:40,860 --> 01:25:43,230
от базового указателя,
что в результате

1802
01:25:43,230 --> 01:25:44,556
даст нам базовый указатель.

1803
01:25:44,556 --> 01:25:46,260
ОК

1804
01:25:46,260 --> 01:25:48,560
Как только мы
получили это,

1805
01:25:48,560 --> 01:25:50,810
очень просто проверить,
находится ли указатель

1806
01:25:50,810 --> 01:25:51,310
внутри границ.

1807
01:25:51,310 --> 01:25:55,360
Мы можем просто проверить,
действительно ли

1808
01:25:55,360 --> 01:26:04,990
p1>=base и

1809
01:26:04,990 --> 01:26:13,422
(p1-base)<size.

1810
01:26:13,422 --> 01:26:15,640
Это должно быть
понятно для вас.

1811
01:26:15,640 --> 01:26:17,672
И таким образом мы
увидим, находится

1812
01:26:17,672 --> 01:26:19,664
указатель внутри
границ, или нет.

1813
01:26:19,664 --> 01:26:22,080
В этом месте всё
предельно понятно.

1814
01:26:22,080 --> 01:26:24,300
В публикации есть
оптимизированная проверка,

1815
01:26:24,300 --> 01:26:25,690
но я не буду в
это углубляться.

1816
01:26:25,690 --> 01:26:27,898
Достаточно сказать, что
бинарная арифметика там

1817
01:26:27,898 --> 01:26:29,839
сводится к тому
же принципу.

1818
01:26:29,839 --> 01:26:31,380
Там несколько хитростей,
которые помогают

1819
01:26:31,380 --> 01:26:35,700
избежать некоторых явных вычислений,
которые мы здесь производим.

1820
01:26:35,700 --> 01:26:36,690
Смысл там в этом.

1821
01:26:36,690 --> 01:26:49,140
Пятый трюк, который
мы используем в системе

1822
01:26:49,140 --> 01:26:59,915
грубой оценки границ - это
использование виртуальной памяти,

1823
01:26:59,915 --> 01:27:04,710
что позволяет избежать выходящего
за границы разыменования.

1824
01:27:04,710 --> 01:27:07,266
Смысл этого в том -
да, сколько времени

1825
01:27:07,266 --> 01:27:08,182
у нас осталось?

1826
01:27:08,182 --> 01:27:09,174
Практически закончилось?

1827
01:27:09,174 --> 01:27:12,490
Смысл в том, что если
у нас есть указатель,

1828
01:27:12,490 --> 01:27:15,990
рассмотренный здесь, для
которого мы определяем

1829
01:27:15,990 --> 01:27:19,145
выход за границы, необходимо

1830
01:27:19,145 --> 01:27:21,820
установить в нём старший бит.

1831
01:27:21,820 --> 01:27:26,350
Делая это мы гарантируем, что
как только он будет разыменован,

1832
01:27:26,350 --> 01:27:28,502
аппаратное обеспечение,
предоставляющее защиту,

1833
01:27:28,502 --> 01:27:30,210
вынудит программу
завершиться с ошибкой.

1834
01:27:30,210 --> 01:27:31,626
Сама по себе установка

1835
01:27:31,626 --> 01:27:33,940
этого бита не
вызовет проблем.

1836
01:27:33,940 --> 01:27:35,740
Проблемы появятся только
в случае

1837
01:27:35,740 --> 01:27:37,540
разыменования этого указателя.

1838
01:27:37,540 --> 01:27:39,090
ОК.

1839
01:27:39,100 --> 01:27:40,590
Внимание! Этот перевод, возможно, ещё не готов.
Его статус: перевод редактируется

1840
01:27:40,600 --> 01:27:43,090
Переведено на Нотабеноиде
http://translate.kursomir.ru/book/4/7

1841
01:27:43,100 --> 01:27:44,090
Переводчики: mummick, pteacher

