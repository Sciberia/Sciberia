Требования:


Установленный ruby на компьютере.

а. Если вы используете Mac/Linux, то он уже установлен по умолчанию.


б. Если у вас Windows, можете установить Ruby с помощью Ruby Installer http://rubyinstaller.org


Если вы закончили руководство №0, то Ruby уже должен быть установлен.


...

...

...

Цели руководства:



Ознакомиться с языком программирования руби.


Полезные ссылки для изучения руби:

1. Глава 4 учебника по Ruby on Rails http://ruby.railstutorial.org/ruby-on-rails-tutorial-book (англ.), http://rusrails.ru/ (рус.).

2. Интерактивный учебник от Codeschool http://www.codeschool.com/paths/ruby.

3. Изучаем руби (ориг. Learning Ruby) Майкла Фицджеральда

http://proquest.safaribooksonline.com/book/web-development/ruby/9780596529864

[Для использования ссылки нужен сертификат MIT]

Программирование на Ruby: Руководство прагматичного программиста,
http://www.ruby-doc.org/docs/ProgrammingRuby/ (англ.)

Тема 1. Общая информация о Ruby.

1.Что это такое?

а. Это язык программирования, созданный в середине 1990-х Юкихиро Мацумото.

b. Это объектноориентированный язык общего назначения, на синтакс которого повлияли Perl/Python/Lisp.

с. Также, как и Python, это интерпретируемый язык, то есть его код исполняется строка за строкой после запуска, а не компилируется.

2. Преимущества Ruby:

a. Позволяет создавать веб-приложения просто и быстро.

b. Доступ к обширной библиотеке RubyGems (более 50 000 гемов).

с. "Краткий, элегантный и мощный".

3. Недостатки использования Ruby.

a. Ruby достаточно медленный, по сравнению с другими языками. Фактически он может исполняться в 20 раз медленнее, чем Java.

...

b. бедная документация.

Тема 2: Ruby и Python

1. Философия.

а. Питон создавался с целью повышения продуктивности и читабельности кода.

b. Ruby был создан для того, чтобы "сделать программирование интересным его создателю".

2. Объектно ориентированное программирование.

а. Оба языка поддерживают объектно ориентированное программирование.

b. В Ruby буквально все является объектом. Например, в Ruby, [экземпляры] классов и модулей являются объектами и сам класс и модуль являются объектами.

с. И все же в Ruby все функции и почти все операторы являются фактически методами объекта, в Python сами функции являются объектами первого класса.

Функция в Python обычно декларируется как /часть/ другого объекта (как правило класс, экземпряр класса или модуль), но его можно свободно прикреплять к другим объектам.

3. Синтаксис.

a. Python имеет классные функциональные особенности, такие как абстракция списков и генераторы.

В Ruby этого нет.

b. Тем не менее, Ruby дает большую свободу выбора при написании кода:

Скобки можно ставить, а можно и опустить, количество пробелов не имеет такого значения, как в Python.

...

4. Скорость.

a. В целом, Python исполняет код быстрее, чем Ruby.

5. Приложения

a. Python используется в автоматизации системного администрирования и разработке программного обеспечения, разработке веб-приложений, анализе научных данных...

...

.. (с помощью модулей numpy, scipy и  matplotlib), биостатистике и обучении основам программирования и компьютерных наук.

...

b. Ruby используется в разработке веб-приложений и /*общем*/ программировании.

Тема 3. Лексические соглашения Ruby.

1. Пробелы.

a. Пробелы, табуляция и другие подобные символы, в целом, игнорируются в Ruby, кроме случаев использования в строках.

...

2. Окончания строк.

a. Ruby интерпретирует точку с запятой и начало новой строки как конец выражения.

Если перед началом строки стоит оператор, например +, - или \ в начале второй строки, это означает продолжение выражения.

b. будьте аккуратны с многострочными выражениями. Помните о неолбходимости добавлять всегда + в конце строки, если выражение продолжается на следующей.

c. Напр: a = ( 4 + 5 ) //выводит 9

d. Напр: a = ( 4
+ 5 ) //выводит 5 [ОТМЕТЬТЕ РАЗНИЦУ]

Это происходит потому, что выражение интерпретируется как a = (4; +5).

Таким образом, мы получаем 4, а затем  +5, которое является результатом, так как является последним выражением.

e. Напр: a = ( 4 +
5 ) //выводит 9

3. Комментарии.

a. Комментарии, это строки аннотации, игнорируемый интерпретатором во время исполнения кода.

Комментарии, начинающиеся с #, являются однострочными.

b. Напр: # This is a comment

с. Код Ruby также может включать втроенные документы. Они начинаются со строки =begin до строки, начинающейся с =end.

=begin и =end должны идти в начале строки.

d. Напр: =begin

Это встроенный документ.

=end

4. Идентификаторы.

а. Идентификаторы -- это названия переменных, констант и методов.

б. Руби различает идентификаторы, начинающиеся с большой и с маленькой буквы.

с. Имена идентификатором могут содержать нижнее подчеркивание (_), буквы латинского алфавита и цифры.

d. Можно различить тип переменной по первому символу ее идентификатора.

5. Зарезервированные слова.

a. В руби есть список зарезервированных слов, которые нельзя использовать в качестве констант или имен локальных переменных.

б. Список зарезервированных слов можно найти по ссылке http://www.tutorialspoint.com/ruby/ruby_quick_guide.htm (англ)

Тема 4. Руби -- объектно ориентированный язык.

В руби есть классы.

Классы содержат данные: в форме переменных и констант; и методы, которые являются сжатыми наборами кода, позволяющими производить операции над данными.

Классы могут наследовать информацию друг от друга, но только один за одним.

Это позволяет использовать один и тот же код множество раз, а значит потратите меньше времени на починку и дебаггинг кода и "перемешаете" код с помощью наследования.

3. В руби почти все является объектом.

Фактически, все, что можно в руби привязать к имени переменной, является объектом.

Например:

class Hello

def howdy

greeting= “Hello, Matz!”

puts greeting

end

end

class Goodbye < Hello

def solong

greeting = “Goodbye, Matz!”

puts greeting

end

end

friendly = Goodbye.new

friendly.howdy

friendly.solong

Если мы запустим код выше, то получим

Hello, Matz!

Goodbye, Matz.

Поскольку

класс Hello cодержит метод howdy.

Класс Goodbye также содержит описание метода solong.

Класс Goodbye также наследует то, что содержит класс Hello (для этого и нужен символ < ).

Это значит, что в классе Goodbye не надо заново создавать метод howdy. Он его просто унаследовал. friendly является объектом (экземпляр класса Goodbye).

Можете использовать объект friendly для вызова как метода howdy, так и метода solong, так как он унаследовал его от класса Goodbye, а класс Goodbye унаследовал этот метод от класса Hello.

Тема 5: Объявление переменных.

1. В руби не объявляются типы.

Язык просто присваивает переменным значения.

а. Пример: month = 12

2. Локальные переменные:

а. Должны начинаться с маленькой буквы или видимого пробела.

б. Пример 1: alpha

в. Пример 2: _beta

г. Если локальная переменная объявлена внутри метода или цикла, ее область видимости заключена в данном методе или цикле.

3. Переменные экземпляра.

Переменная экземпляра, это такая переменная, ссылка на которую есть в экземпляре класса, таким образом переменная принадлежит данному экземпляру.

b. Название всегда начинается c одного символа коммерческого at (@).

c. Пример: @hello = 6170

г. Переменная доступна вне своего класса только при использовании методов-аксессоров.

4. Переменные классов.

а. Экземпляры класса. Только одна копия переменной класса существует для данного класса.

б. Они начинаются всегда с двух символов коммерческого at (@@).

с. Необходимо инициализировать класс перед использованием.

г. Пример: @@times = 0

5. Глобальные переменные.

а. Глобальные переменные доступны по всей программе, в любой из ее структурных единиц. Их область видимости -- вся программа.

б. Они всегда начинаются со знака доллара ($).

в. Пример: $amount = “0.00”

Тема 6. Модуль Math.

1. Конвертирование чисел.

a. Integer(1.4) => 1 // преобразует число с плавающей точкой в целочисленное.

b. Integer(“256”) => 256 // преобразует строку.

c. Integer(“0b100”) => 8 // преобразует строку в двоичноое число

d. Integer(?z) => 122 // преобразует символ в ASCII

2. Основные операторы модуля Math: 

a. Используйте + , - , * , / для сложение, вычитание, умножение, деление.

5б. Используйте ** for exponent

в. Используйте % для нахождения остатка от деления.

3. Деление и округление.

а. 25 / 2 => 12 // Деление целых чисел всегда округляется к меньшему.

b. 25.0 / 2 => 12.5 // Используйте как минимум одно число с плавающей запятой, чтобы остановить округление.

4. Интервалы (ranges).

a. Оператор  . . обозначает интервал чисел, включая последнее число.

Пример: 1 . . 10 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

b. Оператор . . . обозначает интервал чисел, не включая последнее число.

Пример: 1 . . . 10 = (1, 2, 3, 4, 5, 6, 7, 8, 9)

с. Создание массива из интервала чисел:

(1 . . 9).to_a => [1, 2, 3, 4, 5, 6, 7, 8, 9] //.to_a значит “to array”, в массив.

5. Полезные методы Math.

a. Абсолютная величина (модуль): -40.abs => 40

б. Округление к большему числу: 4.65.ceil => 5

в. Округление к меньшему: 4.65.floor => 4

г. Округление к ближайшему целому: 100.45.round => 100

Тема 7: класс String.

1. Ф\Основные функции со строками:

a. title = String.new // присваивается title = “”.

b. title.empty? // Возвращает булинь, показывающий является ли title пустой строкой (“”).

c. title.length // возвращает длину строки.

2. Конкатенация строк.

а. “Hello,” “ “ “Matz” “!” // Создает “Hello, Matz!”

б. “Hello,” + “ “ + “Matz” + “!” // Также создает “Hello, Matz!”

c. “Hello, “ << “Matz!” // Опять создает “Hello, Matz!”

d. “Hello, “.concat “Matz!” // Опять создает “Hello, Matz!”

4. Доступ к строкам.

a. line = “A horse! a horse! my kingdom for a horse!”

b. line[18, 23] => “my kingdom for a horse!” // 18 = место начала отсчета,

// 23 = количество нужных букв

c. line.index(“k”) => 21 // возвращает первый индекс, где присутствует символ "k".

4. Сравнения.

a. hay == nicolay // сравнивает hay с nicolay. Возвращает false.

b. hay.eql? nicolay // сравнивает hay с nicolay. Возвращает false.

c. “a” <=> “v” // <=> -- это "космический корабль". Он возвращает 0 если значения равны,
-1 если первое число меньше, и 1 если больше.

65. Вставка строки в строку.

a. “Be carful .” .insert 6, “e” => “Be careful.” //Вставило “e” на шестую позицию.

6. Замена подстроки.

a. “That’s alll fokes”.gsub “alll”, “all” => “That’s all folks”

7. Обращение строк:

a. “abcdefghijkl”.reverse => “lkjihgfedcba”

Тема 8: Массивы;

1. Класс Array -- это один из встроенных классов в руби. Массивы в могут содержать различные объекты, такие как String, Integer, Fixnum, Hash, Symbol и даже другие массивы.

Любой объект, созданный руби можно поместить в массив.

2. Добавление элементов в массив автоматически увеличивает его размер.

3. Массив в руби может содержать объекты различных типов.

4. Основные методы, применимые к массивам:

а. months = Array.new // Создает новый массив [ ]

b. months.empty? // Возвращает булинь, true -- если массив пуст, false, если массив содержит объекты.

c. months.size // Возвращает размер массива

d. months.length // Тоже возвращает размер массива

e. months.clear // Убирает значения из массива, возвращает пустой массив [ ]

f. months = Array.[ ] (“jan”, “feb”, “mar”, “dec”) //Создает массив с названиями месяцев.

g. months = [ nil, “Jan”, “Feb”, “Mar”, “Dec” ] //Другой способ создания массива.

h. digits = Array(0 . . 9) //Создает массив [1, 2, 3, 4, 5, 6, 7, 8, 9]

5. Итерация массива

a. sample = [“a”, “b”, “c”, “d”, “z”, 1, 5].

sample.each { |e| print e } //печатает каждый элемент массива.

6. Доступ к элементам массива.

a. months = [“Jan”, “Feb”, “Mar”, “Apr”, “May”, “Jun”, “Jul”, “Aug”, “Dec” ]

b. months[0] // возвращает "Jan"

c. months[-1] // возвращает "Dec"

d. months[0, 2] // начало = 0, количество элементов = 2
// Возвращает [“Jan”, “Feb”]

e. months.include? “Nov” //Возвращает “Nov”, если элемент существует в массиве months.

7. Сложение (конкатенация) массивов.

a. Пусть q1, q2 являются двумя массивами.

Вы можете объединить их в массив
q3, следующим образом: q3 = q1 + q2

b. yrs = [2010, 2011, 2012]

yrs << 2013 // yrs теперь равна [2010, 2011, 2012, 2013]

8. Set операции.

а. Пересечение массивов (&) создает новый массив только с теми элементами, которые встречаются в обоих массивах, также убираются дублирующиеся элементы.

Пример: year = semester1 & semester2

b. Разность (-) создает новый массив, убирая из первого все элементы, встречающиеся во втором массиве.

Пример: year = semester1 – semester2

c. Объединение (|) объединяет два массива в один, исключая дублирующие элементы.

Пример: year = semester1 | semester2

9. Удаление дубликатов.

a. shopping_list = [“apples”, “oranges”, “apples”, “bananas”, “oranges”]

shopping_list.uniq! // Возвращает [“apples”, “oranges”, “bananas”]

10. Удаление.

a. months = [“Jan”, “Feb”, “Mar”, “Apr”, “May”, “Jun”, “Jul”, “Aug”, “Dec” ]

b. months.delete(“Jan”) //Удаляет элемент “Jan” из массива.

c. months.delete_at(2) //Удаляет элемент с индексом 2 из массива.

Внимание! Этот перевод, возможно, ещё не готов.
Его статус: идёт перевод

Переведено на Нотабеноиде
http://translate.kursomir.ru/book/157/919

Переводчики: Edwinna

